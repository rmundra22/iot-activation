<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-20T11:12:33+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">IoT Activation</title><subtitle>Welcome to the Revolu&lt;strong&gt;IOT&lt;/strong&gt;n</subtitle><entry><title type="html">AWS CloudFormation IPsec</title><link href="http://localhost:4000/AWSCFIPsec.html" rel="alternate" type="text/html" title="AWS CloudFormation IPsec" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/AWSCFIPsec</id><content type="html" xml:base="http://localhost:4000/AWSCFIPsec.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#ipsec-vpn-one-click-away&quot;&gt;IPsec VPN one click away&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#aws-cloudformation&quot;&gt;AWS CloudFormation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#ec2-key-pair&quot;&gt;EC2 Key Pair&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cloud-formation-create-new-stack&quot;&gt;Cloud Formation create new stack&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#download-configuration&quot;&gt;Download Configuration&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ipsec-vpn-one-click-away&quot;&gt;IPsec VPN one click away&lt;/h1&gt;

&lt;p&gt;if you prefer, you can configure the AWS IPsec following the next tutorial step by step.
But if this is not the case. We have this one click solution for you!!&lt;/p&gt;

&lt;h2 id=&quot;aws-cloudformation&quot;&gt;AWS CloudFormation&lt;/h2&gt;

&lt;p&gt;CloudFormation provides a common language for you to describe and provision 
all the infrastructure resources in your cloud environment.&lt;/p&gt;

&lt;p&gt;It allows you to use a simple text file to build and rebuild your infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;ec2-key-pair&quot;&gt;EC2 Key Pair&lt;/h3&gt;

&lt;p&gt;Before starting, you need create a Key Pair for secure access to the EC2 machine.&lt;/p&gt;

&lt;p&gt;For it, go to EC2 AWS console / &lt;strong&gt;NETWORK &amp;amp; SECURITY&lt;/strong&gt; / &lt;strong&gt;Key Pairs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and click on &lt;strong&gt;Create Key Pair&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_EC2_KeyPair_create.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Type a Key Pair name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_EC2_KeyPair_create_name.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new .pem file is created. Use this file to connect EC2 machine using a SSH client.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloud-formation-create-new-stack&quot;&gt;Cloud Formation create new stack&lt;/h3&gt;

&lt;p&gt;To begin with, Go to CloudFormation Console:&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Stack&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the new window that opens, fill the form with the &lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Cloud_Formation/IPsec.txt&quot;&gt;file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_file.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Choose a name for your Stack and select your EC2 Key Pair created in the previous step.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awscloudformationipsec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_ipsec.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the next window, you don’t need to configure any options&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_option.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now the wizard shows you a stack review.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_review_ipsec1.png&quot; alt=&quot;pic&quot; /&gt;
&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_review_ipsec2.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Execute&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;It can take several minutes for deploy all the services.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_running_ipsec.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wait for a few minutes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_running_ipsec_ok.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, all you infrastructure are created. It just needs a last step.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;download-configuration&quot;&gt;Download Configuration&lt;/h3&gt;

&lt;p&gt;To Configure the IPsec connection with Telefonica’s network you must send a configuration file.
This file can be download from AWS console.&lt;/p&gt;

&lt;p&gt;Go to VPC console / &lt;strong&gt;Virtual Private Network (VPN)&lt;/strong&gt; / &lt;strong&gt;Site-to-Site VPN&lt;/strong&gt; / 
And Select your VPN connections&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_VPC_VPNconnection_download_ipsec.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;complete the information as in the image below and click &lt;strong&gt;Download&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_VPC_VPNconnection_download_config_ipsec.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon provide a redundant connection. You have to download and send the two VPN connection files.&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents IPsec VPN one click away AWS CloudFormation EC2 Key Pair Cloud Formation create new stack Download Configuration IPsec VPN one click away if you prefer, you can configure the AWS IPsec following the next tutorial step by step. But if this is not the case. We have this one click solution for you!! AWS CloudFormation CloudFormation provides a common language for you to describe and provision all the infrastructure resources in your cloud environment. It allows you to use a simple text file to build and rebuild your infrastructure. EC2 Key Pair Before starting, you need create a Key Pair for secure access to the EC2 machine. For it, go to EC2 AWS console / NETWORK &amp;amp; SECURITY / Key Pairs and click on Create Key Pair button. Type a Key Pair name: A new .pem file is created. Use this file to connect EC2 machine using a SSH client. Cloud Formation create new stack To begin with, Go to CloudFormation Console: Click on Create Stack button In the new window that opens, fill the form with the file Click Next. Choose a name for your Stack and select your EC2 Key Pair created in the previous step. awscloudformationipsec Click Next. In the next window, you don’t need to configure any options Click Next. Now the wizard shows you a stack review. Click on the Execute button. It can take several minutes for deploy all the services. wait for a few minutes Now, all you infrastructure are created. It just needs a last step. Download Configuration To Configure the IPsec connection with Telefonica’s network you must send a configuration file. This file can be download from AWS console. Go to VPC console / Virtual Private Network (VPN) / Site-to-Site VPN / And Select your VPN connections complete the information as in the image below and click Download Amazon provide a redundant connection. You have to download and send the two VPN connection files.</summary></entry><entry><title type="html">AWS Dashboard</title><link href="http://localhost:4000/AWSdashboard.html" rel="alternate" type="text/html" title="AWS Dashboard" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/AWSdashboard</id><content type="html" xml:base="http://localhost:4000/AWSdashboard.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#display-your-dashboard-in-less-than-3-minutes-one-click-away&quot;&gt;Display your dashboard&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#aws-cloudformation&quot;&gt;AWS CloudFormation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#freeboard&quot;&gt;Freeboard&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#load-a-freeboard&quot;&gt;load a freeboard&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;display-your-dashboard-in-less-than-3-minutes-one-click-away&quot;&gt;Display your dashboard in less than 3 minutes. One click away!!&lt;/h1&gt;

&lt;p&gt;Storing your values in the shade is a great solution, but sometimes your clients become far more demanding.
In these cases, you need to develop a custom dashboard.&lt;/p&gt;

&lt;p&gt;We’ve thought in this case. We have this one click solution for you!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_dashboard.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;aws-cloudformation&quot;&gt;AWS CloudFormation&lt;/h2&gt;

&lt;p&gt;CloudFormation provides a common language for you to describe and provision 
all the infrastructure resources in your cloud environment.&lt;/p&gt;

&lt;p&gt;It allows you to use a simple text file to build and rebuild your infrastructure.&lt;/p&gt;

&lt;p&gt;To begin with, Go to CloudFormation Console:&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Stack&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the new window that opens, fill the form with the link below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://s3-eu-west-1.amazonaws.com/lambda-for-deploy/cloud_formartion_freeboard.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the link you can see a public s3 bucket with our CloudFormation template.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Select a name for your Stack and use the same for name your s3 bucket:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iotactivationdashboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_name.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the next window, you don’t need to configure any options&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_option.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now the wizard will warn you about the capabilities. Just tick the boxes.&lt;/p&gt;

&lt;p&gt;Finally, click on &lt;strong&gt;Create Change Set&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_config_review.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Execute&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;It can take several minutes for deploy all the services.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_running.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a result, when it’s finishes you will get a new link for display your dashboard.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Output&lt;/strong&gt; tab an click on the Website URL&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_CloudFormation_Stack_create_ok.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll already have your freeboard created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;freeboard&quot;&gt;Freeboard&lt;/h2&gt;

&lt;p&gt;Freeboard is a simple dashboards for your devices.
It allow you build real-time, interactive dashboards and visualizations in minutes using the intuitive interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_add.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add a new source, you must select and set up an AWS account and fill the fields with your broker and thing topic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_aws.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is add new panes. Let your imagination fly!!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;load-a-freeboard&quot;&gt;load a freeboard&lt;/h3&gt;

&lt;p&gt;One simple example is the dashboard designed for this shadow.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TZEUXBZPZN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;40.431948&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-3.666315&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Thu Mar 21 12:39:24 2019&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_dashboard.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can load it from this &lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/AWS_Dashboard/freeboard.json&quot;&gt;file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_load.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the same way, you can export your freeboard. It is an important step to recover your configuration. 
It is lost every time you refresh the web.&lt;/p&gt;

&lt;p&gt;📍
Be careful, you don’t share this file. It contains your account access key.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents Display your dashboard AWS CloudFormation Freeboard load a freeboard Display your dashboard in less than 3 minutes. One click away!! Storing your values in the shade is a great solution, but sometimes your clients become far more demanding. In these cases, you need to develop a custom dashboard. We’ve thought in this case. We have this one click solution for you!! AWS CloudFormation CloudFormation provides a common language for you to describe and provision all the infrastructure resources in your cloud environment. It allows you to use a simple text file to build and rebuild your infrastructure. To begin with, Go to CloudFormation Console: Click on Create Stack button In the new window that opens, fill the form with the link below: https://s3-eu-west-1.amazonaws.com/lambda-for-deploy/cloud_formartion_freeboard.txt In the link you can see a public s3 bucket with our CloudFormation template. Click Next. Select a name for your Stack and use the same for name your s3 bucket: iotactivationdashboard Click Next. In the next window, you don’t need to configure any options Click Next. Now the wizard will warn you about the capabilities. Just tick the boxes. Finally, click on Create Change Set. Click on the Execute button. It can take several minutes for deploy all the services. As a result, when it’s finishes you will get a new link for display your dashboard. Go to Output tab an click on the Website URL You’ll already have your freeboard created. Freeboard Freeboard is a simple dashboards for your devices. It allow you build real-time, interactive dashboards and visualizations in minutes using the intuitive interface. To add a new source, you must select and set up an AWS account and fill the fields with your broker and thing topic. All you have to do is add new panes. Let your imagination fly!!! load a freeboard One simple example is the dashboard designed for this shadow. { &quot;reported&quot;: { &quot;raw&quot;: { &quot;sensor1&quot;: 3, &quot;text1&quot;: &quot;TZEUXBZPZN&quot;, &quot;sensor2&quot;: 76, &quot;location&quot;: { &quot;latitude&quot;: 40.431948, &quot;longitude&quot;: -3.666315 }, &quot;time&quot;: &quot;Thu Mar 21 12:39:24 2019&quot; } } } You can load it from this file In the same way, you can export your freeboard. It is an important step to recover your configuration. It is lost every time you refresh the web. 📍 Be careful, you don’t share this file. It contains your account access key.</summary></entry><entry><title type="html">Arduino to AWS</title><link href="http://localhost:4000/ArduinoAWS.html" rel="alternate" type="text/html" title="Arduino to AWS" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/ArduinoAWS</id><content type="html" xml:base="http://localhost:4000/ArduinoAWS.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-mkr-nb-1500-to-aws-iot&quot;&gt;Arduino: MKR NB-1500 to AWS-IoT&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-started-with-the-mkr-nb-1500&quot;&gt;Getting started with the MKR NB-1500&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-will-you-learn&quot;&gt;What will you learn?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-a-device-thing-in-aws-iot&quot;&gt;Create a device thing in AWS-IoT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-mqtt&quot;&gt;What is MQTT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-communicate-with-aws&quot;&gt;How to communicate with AWS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#test-your-certificates-with-mqttfx&quot;&gt;Test your Certificates with MQTT.fx&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-start-with-the-project&quot;&gt;How to Start with the project&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#arduino-board-run-a-code-file&quot;&gt;Arduino Board: Run a code file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#udp-data-bridge-connecting-using-nb-iot-o-lte-m&quot;&gt;UDP data Bridge: Connecting using NB-IoT o LTE-M&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#check-the-shadow&quot;&gt;Check the Shadow&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#send-a-command&quot;&gt;Send a command&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-your-dashboards&quot;&gt;Create your Dashboards&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;arduino-mkr-nb-1500-to-aws-iot&quot;&gt;Arduino: MKR NB-1500 to AWS-IoT&lt;/h1&gt;

&lt;p&gt;For this project, we’re going to use a Arduino board to take measures and publish their values in AWS.
You will also be able to send commands for turn the board led on/off.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
	  &lt;img title=&quot;Project_ard&quot; src=&quot;pictures/schematics/overview_arduino_AWS.png&quot; href=&quot;docs/ArduinoAWS.html&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-the-mkr-nb-1500&quot;&gt;Getting started with the MKR NB-1500&lt;/h2&gt;

&lt;p&gt;The Arduino MKR NB 1500 adds wireless connectivity, Narrow Band IoT and LTE CAT M1, to the Arduino family. 
It is a  development board which contains the ATMEL SAMD21 micro controller, 
designed to integrate a low power-consumption core and a high performance.&lt;/p&gt;

&lt;h4 id=&quot;what-will-you-learn-&quot;&gt;What will you learn ?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Control Arduino board MKR NB-1500 using the Arduino IDE&lt;/li&gt;
  &lt;li&gt;Register a device on AWS&lt;/li&gt;
  &lt;li&gt;Generate credentials for AWS&lt;/li&gt;
  &lt;li&gt;Take measurements&lt;/li&gt;
  &lt;li&gt;Build a bridge between UDP and AWS&lt;/li&gt;
  &lt;li&gt;Send commands to the device&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Have successfully completed the Arduino &lt;a href=&quot;ArduinoStarterKit.html&quot;&gt;Starterkit tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Arduino board MKR NB-1500&lt;/li&gt;
  &lt;li&gt;Micro USB cable&lt;/li&gt;
  &lt;li&gt;Arduino IDE&lt;/li&gt;
  &lt;li&gt;AWS account&lt;/li&gt;
  &lt;li&gt;Telefónica SIMs with private APN &lt;a href=&quot;BPIPsec.html&quot;&gt;(IPsec)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;KitePlatform.html#access-step-by-step-using-the-curl-command&quot;&gt;KITE Platform&lt;/a&gt; Certificates files&lt;/li&gt;
  &lt;li&gt;Telefónica &lt;a href=&quot;BPDataBridge.html&quot;&gt;data Bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you had successfully completed the Arduino Starterkit tutorial, all the necessary software is already updated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-device-thing-in-aws-iot&quot;&gt;Create a device thing in AWS-IoT&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the AWS Management Console, and then open the AWS IoT console at https://console.aws.amazon.com/iot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the Monitor page. In the left navigation panel, choose Manage, and then choose Things.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You don’t have a thing created yet. Choose Register a thing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Register.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the Creating AWS IoT things page, choose Create a single thing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Register_things.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enter a name for the device, leave the default values for all the other fields, and then choose Next.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Register_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now you should generate the certificates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Certificates.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download your public and private keys, certificate, and root certificate authority (CA)on your PC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Certificates_Download.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download your root certificate authority, a new window will open for select a CA to download.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Certificates_Download_CA.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t forget to save these files, you need them to set the connection&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Returns to the previous window and &lt;strong&gt;Activate&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Attach a policy&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Certificates_Download.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Close this window. Before, you need to create and attach a new policy to the certificate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Certificates_AttachPolicy.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open the AWS IoT console again https://console.aws.amazon.com/iot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the left navigation panel, choose &lt;strong&gt;Secure&lt;/strong&gt;, and then choose &lt;strong&gt;Policies&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Create a Policy&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Secure_Policies.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enter a Name for the policy:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;        enter &lt;strong&gt;iot:&lt;/strong&gt;*&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resource ARN&lt;/strong&gt;  enter &lt;strong&gt;*&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Effect&lt;/strong&gt;        choose &lt;strong&gt;Allow&lt;/strong&gt;
Select Create. This policy allows your Device to publish messages to AWS IoT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Secure_Policies_Create_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the AWS IoT console, choose &lt;strong&gt;Manage&lt;/strong&gt;, &lt;strong&gt;Things&lt;/strong&gt;. On the Things page, choose your Thing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the thing’s &lt;strong&gt;Details&lt;/strong&gt; page, in the left navigation panel, choose &lt;strong&gt;Interact&lt;/strong&gt;.
Make a note of the REST API endpoint. You need it to connect to your device shadow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Interact_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now select &lt;strong&gt;Security&lt;/strong&gt;, and choose the certificate that you created earlier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Security_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Actions, choose Attach policy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Security_Policy_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select your new policy and then choose Attach&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Security_Policy_Attach_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-mqtt&quot;&gt;What is MQTT&lt;/h2&gt;
&lt;p&gt;MQTT is a machine-to-machine (M2M)/”Internet of Things” connectivity protocol.
It was designed as an extremely lightweight publish/subscribe messaging transport.&lt;/p&gt;

&lt;p&gt;The first concept is the publish and subscribe system.
A device can publish a message on a topic,
or it can be subscribed to a topic to receive messages&lt;/p&gt;

&lt;p&gt;AWS use this system to communicate with your devices.&lt;/p&gt;

&lt;p&gt;Access to IoT Core in AWS Management Console and go to the left navigation pane. Select Manage, and then choose Things.&lt;/p&gt;

&lt;p&gt;When you pick a thing you can find out the different topic that you can subscribe/publish&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Interact&lt;/strong&gt; to inspect them.&lt;/p&gt;

&lt;p&gt;📍
Don’t forget to copy also the Rest API, you will need it as a broker address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Interact_MQTT_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the moment, you only need to know three topics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Publish in this topic to update the thing shadow
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Subscribe to this topic to check if the report was accepted
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update/accepted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Subscribe to this topic to check if the report was rejected
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update/rejected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-communicate-with-aws&quot;&gt;How to communicate with AWS&lt;/h2&gt;

&lt;p&gt;As you know, when you register a new device in AWS, his reserved Topics are created by default,
You can use these topics for send data and receive information from the shadow.&lt;/p&gt;

&lt;p&gt;For the time being, you only need to know a couple of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;topic Update
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;this topic is where you publish the status of the device for update the shadow,
in this tutorial this information is composed of values sent by the Arduino with the label &lt;strong&gt;reported&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also use the topic to communicate the desires to the shadow.
You must publish in the shadow like the Arduion, but using the label &lt;strong&gt;desired.&lt;/strong&gt;
In this case we use MQTT.fx to communicate these desires to AWS and to report the change to the device.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;topic Delta
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update/delta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This is the channel that AWS uses to communicate to the device 
the difference between the reported status and the desired status.
It is necessary that the device is subscribed to the topic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these status are recorded in the &lt;strong&gt;shadow&lt;/strong&gt; of the device. 
To check the current status, you should access the AWS IoT core as we taught you at the previous section.&lt;/p&gt;

&lt;p&gt;Here you have an example:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;desired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:34,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:24}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;delta&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can read in the above example, there are three main keys:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“desired”: It contains the desired state sent from the MQTT.fx&lt;/li&gt;
  &lt;li&gt;“reported”: It contains the status information reported by the device&lt;/li&gt;
  &lt;li&gt;“delta”: It contains the differences between the reported status and the desired status. 
This is the information that is published in the delta topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-your-certificates-with-mqttfx&quot;&gt;Test your Certificates with MQTT.fx&lt;/h2&gt;

&lt;p&gt;One of the best ways to make sure that certificates had been created correctly, it is to try connecting via a 
MQTT client with graphical interface.&lt;/p&gt;

&lt;p&gt;We recommend you download MQTT.fx from the following link https://mqttfx.jensd.de/&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open MQTT.fx and create a new connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_open.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Configure the broker as shown in the image below.
Remember to use the files you downloaded in the previous step. And configure the broker address associated to your device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_Broker_Connect.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now that you are connected to the broker, you need to subscribe to the topics accepted and rejected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When a message is published, 
you can check in these topics if the message has been &lt;strong&gt;accepted&lt;/strong&gt; or &lt;strong&gt;rejected&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update/accepted
$aws/things/MyDevice/shadow/update/rejected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_Topic_Subscribe_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To update your device’s shadow, you should publish in the topic the following &lt;strong&gt;json file&lt;/strong&gt;, 
you can use the following link to validate it https://jsonlint.com/&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;state&quot;: {
        &quot;reported&quot; : { 
            &quot;voltage&quot; : 22
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This example simulates the publication of voltage measurements made by the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_Manage_Things_Details_Shadow_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the topic to update your shadow.
Be sure to select the service quality level as QoS 0, amazon doesn’t allow different police.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$aws/things/MyDevice/shadow/update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_Topic_Publish_Device.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you want to delete the shadow’s document publish the next &lt;strong&gt;json file&lt;/strong&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
 &quot;state&quot;: null
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Play with this, sending different values until you understand how it works.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;👍
Remember to check if your values has been accepted or rejected&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-start-with-the-project&quot;&gt;How to Start with the project&lt;/h1&gt;

&lt;p&gt;We will explain it to you later in detail. but in this tutorial,
first you need to be familiar with the following concepts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run a code file on your Arduino Board&lt;/li&gt;
  &lt;li&gt;Run a python code&lt;/li&gt;
  &lt;li&gt;Use MQTT.fx to post messages in a topic&lt;/li&gt;
  &lt;li&gt;Review the shadow from AWS core&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can connect to the internet and send your data through the UDP protocol.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arduino-board-run-a-code-file&quot;&gt;Arduino Board: Run a code file&lt;/h2&gt;

&lt;p&gt;For this Arduino project, it is necessary that you include some of the files that we have exclusively prepared 
for this tutorial.&lt;/p&gt;

&lt;p&gt;To do this, be sure to open the &lt;strong&gt;.ino&lt;/strong&gt; file from the following 
&lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Arduino/Connection_UDP_command&quot;&gt;folder&lt;/a&gt;. 
There are all the files that you will need.&lt;/p&gt;

&lt;p&gt;In the following code you can check the main structure of the program:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Measuring&lt;/li&gt;
  &lt;li&gt;Modem connection to the network&lt;/li&gt;
  &lt;li&gt;Sending of the measures&lt;/li&gt;
  &lt;li&gt;Disconnection of the modem to reduce power consumption&lt;/li&gt;
  &lt;li&gt;Sampling timeout&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// put your main code here, to run repeatedly:&lt;/span&gt;
    
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;measuring...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measurement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- voltage: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_voltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- amperage: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_amperage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sending... &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     
  &lt;span class=&quot;n&quot;&gt;nbAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noLowPowerMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;send_data_UDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_voltage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_amperage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;nbAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowPowerMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But first of all, don’t forget to complete the configuration 
&lt;a href=&quot;https://github.com/telefonicaid/iot-activation/blob/master/scripts/Arduino/Connection_UDP_command/configuration.h&quot;&gt;file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to complete necessary information to connect to the UDP server.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// COMPLETE your information&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SECRET_PINNUMBER &quot;&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LOCAL_PORT 4114
#define IP_ADDRESS &quot;XX.XX.XX.XX&quot;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// SET your sampling time&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define POLL_TIME 10
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;udp-data-bridge-connecting-using-nb-iot-o-lte-m&quot;&gt;UDP data Bridge: Connecting using NB-IoT o LTE-M&lt;/h2&gt;

&lt;p&gt;One of the advantages of an iot device, is to be able to stop the connection when it is not necessary.
This option decrease the energy consumption. So, we suggest you, the deployment of a data bridge between the Arduino and the 
AWS IoT Core.&lt;/p&gt;

&lt;p&gt;Data Bridge will help you with the connection between UDP devices and the public clouds.
After the bridge deployment, it will gather your SIM information from KIte platform.
The data bridge recognizes the SIM and automatically and connects to the corresponding 
AWS MQTT broker based on the configuration you provide it.&lt;/p&gt;

&lt;p&gt;You just make sure to add the name of the thing as one of the fields of the SIM in Kite.
&lt;a href=&quot;KitePlatform.html#sim-identification&quot;&gt;Kite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;BPDataBridge.html&quot;&gt;bridge&lt;/a&gt;
is the easiest way to connect to AWS using only one UDP send&lt;/p&gt;

&lt;p&gt;📍
If you’re running the connection tests in The Thinx lab.
The SIM you use will not have connectivity with the Kite platform.
So you will not be able to use the connection through our Bridge. 
Even so you have access to the internet and you will be able to perform any test on your infrastructure.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;################################# waiting for a new message #################################&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvfrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Message Received [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] from [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] : [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridge_routine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Generate ACK payload [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sent MESSAGE [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] to [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] : [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;check-the-shadow&quot;&gt;Check the Shadow&lt;/h2&gt;

&lt;p&gt;Before starting the execution you will check how your shadow is empty. 
With this Arduino script you can send voltage and current values to the shadow.
The shadow will be updated with every message received from the device.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-a-command&quot;&gt;Send a command&lt;/h2&gt;

&lt;p&gt;To send a command to the device, you must use the MQTT as explained in the previous section through the json that we provide you.
You can change this instruction as many times as needed.&lt;/p&gt;

&lt;p&gt;In this example you can turn on and off the small LED on the board, but you are unrestricted to program
your own instructions. Feel free!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Turn on led
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;desired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn off led
```json
{
  “state”: {
      “desired”: {
          “raw”: 2
      }&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-your-dashboards&quot;&gt;Create your Dashboards&lt;/h2&gt;

&lt;p&gt;Now, you can collect the information from your devices. But reviewing the data from the Shadow can be a tedious task.
The best option is to create a dashboard. It will allow you to visualize all the information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/freeboard/freeboard_init_dashboard.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a great availability of tools for this purpose. 
But some like freeboard, it can subscribe directly to the AWS topic.
If you want to learn how, click in the next &lt;a href=&quot;#AWSdashboard.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents</summary></entry><entry><title type="html">Arduino to Google Cloud</title><link href="http://localhost:4000/ArduinoGCP.html" rel="alternate" type="text/html" title="Arduino to Google Cloud" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/ArduinoGCP</id><content type="html" xml:base="http://localhost:4000/ArduinoGCP.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-mkr-nb-1500-to-google-cloud-iot&quot;&gt;Arduino: MKR NB-1500 to Google Cloud IoT&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-started-with-the-mkr-nb-1500&quot;&gt;Getting started with the MKR NB-1500&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-will-you-learn&quot;&gt;What will you learn?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-mqtt&quot;&gt;What is MQTT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#Generate-your-devices-keys&quot;&gt;Generate your devices keys&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-communicate-with-google-cloud&quot;&gt;How to communicate with Google Cloud&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#test-your-certificates-with-mqttfx&quot;&gt;Test your Certificates with MQTT.fx&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-start-with-the-project&quot;&gt;How to Start with the project&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#arduino-board-run-a-code-file&quot;&gt;Arduino Board: Run a code file&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#udp-data-bridge-connecting-using-nb-iot-o-lte-m&quot;&gt;UDP data Bridge: Connecting using NB-IoT o LTE-M&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#check-the-status&quot;&gt;Check the Status&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#send-configuration&quot;&gt;Send configuration&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;arduino-mkr-nb-1500-to-google-cloud-iot&quot;&gt;Arduino: MKR NB-1500 to Google Cloud IoT&lt;/h1&gt;

&lt;p&gt;For this project, we will take different values from the Arduino board and publish them in Google Cloud.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
	  &lt;img title=&quot;Project_ard&quot; src=&quot;pictures/schematics/overview_arduino_GCP.png&quot; href=&quot;docs/ArduinoGCP.html&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-the-mkr-nb-1500&quot;&gt;Getting started with the MKR NB-1500&lt;/h2&gt;

&lt;h4 id=&quot;what-will-you-learn&quot;&gt;What will you learn&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Control Arduino board MKR NB-1500 using the Arduino IDE&lt;/li&gt;
  &lt;li&gt;Register a device on Google Cloud&lt;/li&gt;
  &lt;li&gt;Generate credentials for devices&lt;/li&gt;
  &lt;li&gt;Build a bridge between UDP and Google Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Finish successfully the Arduino Starterkit tutorial&lt;/li&gt;
  &lt;li&gt;Arduino board MKR NB-1500&lt;/li&gt;
  &lt;li&gt;Micro USB cable&lt;/li&gt;
  &lt;li&gt;Arduino IDE&lt;/li&gt;
  &lt;li&gt;GCP account&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;KitePlatform.html#access-step-by-step-using-the-curl-command&quot;&gt;KITE Platform&lt;/a&gt; Certificates files&lt;/li&gt;
  &lt;li&gt;Telefónica SIMs with private APN &lt;a href=&quot;BPIPsec.html&quot;&gt;(IPsec)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Telefónica &lt;a href=&quot;BPDataBridge.html&quot;&gt;data Bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have successfully completed the Arduino Starterkit tutorial, all the necessary software is already updated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-mqtt&quot;&gt;What is MQTT&lt;/h1&gt;

&lt;p&gt;MQTT is a machine-to-machine (M2M)/”Internet of Things” connectivity protocol. 
It was designed as an extremely lightweight publish/subscribe messaging transport.&lt;/p&gt;

&lt;p&gt;The first concept is the publish and subscribe system. 
A device can publish a message on a topic, 
or it can be subscribed to a topic to receive messages&lt;/p&gt;

&lt;p&gt;Google Cloud use this system to communicate with your devices,&lt;/p&gt;

&lt;p&gt;For each device, google allow you to subscribe to the config and command topic to receive information.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/devices/&amp;lt;device_name&amp;gt;/config
/devices/&amp;lt;device_name&amp;gt;/command/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And publish in a topic to report the device state&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/devices/&amp;lt;device_name&amp;gt;/state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;generate-your-devices-keys&quot;&gt;Generate your devices keys&lt;/h2&gt;

&lt;p&gt;To secure your devices, it is necessary to create a key pair (public/private) with which to validate any connection.&lt;/p&gt;

&lt;p&gt;The easiest way is to use openssl command in a unix console.&lt;/p&gt;

&lt;p&gt;the following example shows the commands with which to generate an RSA-256 private key with a 2048-bit key size.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; GCP_rsa_private.pem 2048
openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; GCP_rsa_private.pem &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; GCP_rsa_public.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;once you’ve executed the commands, you should have the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GCP_rsa_private.pem:&lt;/strong&gt; The private key that must be securely stored on the device and used to sign the authentication.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GCP_rsa_public.pem:&lt;/strong&gt; The public key that must be stored in Cloud IoT Core and used to verify the signature of the authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember to keep them well, the safety of your devices depends on it.&lt;/p&gt;

&lt;p&gt;you need add the public key on the cloud and the private key in your device,
but if you decide to use our Data Bridge, you can only store it on the server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-communicate-with-google-cloud&quot;&gt;How to communicate with Google Cloud&lt;/h2&gt;

&lt;p&gt;To manage your IoT devices you must access the IoT Core of your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_menu.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At a first glance you will be able to identify all your registries and create new ones if you need to.
These records organize and classify your devices within the cloud, so you must have at least one created. 
But don’t worry, later you will see how they can be created automatically using the data Bridge connection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_registry_new.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the same way by accessing each registry, you can see the list of all the devices it contains.
but in the same way accessing the Kite information will be able to create new devices automatically to detect new connections&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_device_new.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can access into a device for check the state and update the configuration, in some cases, 
it is possible to send commands to the device as long as it is subscribed to the corresponding topic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_device_new_config.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to guarantee the security, you will have to 
associate the public keys created in the previous section.&lt;/p&gt;

&lt;h4 id=&quot;check-history&quot;&gt;check history&lt;/h4&gt;

&lt;p&gt;Google Cloud allows you to review up to a historical 10 previous states&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_device_status.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;update-state&quot;&gt;update state&lt;/h4&gt;

&lt;p&gt;To publish in the device you will only have to publish in his corresponding topic. 
Do not forget that you must connect using the private key associated with the key of each device.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/devices/&amp;lt;device_name&amp;gt;/state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;update-config&quot;&gt;update config&lt;/h4&gt;

&lt;p&gt;Click on the button &lt;strong&gt;update configuration&lt;/strong&gt; to store a configuration, each time the device is subscribed to the 
topic will receive as a message the latest version of the configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/devices/&amp;lt;device_name&amp;gt;/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_device_config.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;send-command&quot;&gt;send command&lt;/h4&gt;

&lt;p&gt;Click on the button &lt;strong&gt;send command&lt;/strong&gt; to store a configuration, 
If the device is subscribed to the correct topic, it will receive as a message the sent command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/devices/&amp;lt;device_name&amp;gt;/command/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but for this project we will use the configuration to send any command to the device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_IoTcore_device_command.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-your-certificates-with-mqttfx&quot;&gt;Test your Certificates with MQTT.fx&lt;/h2&gt;

&lt;p&gt;One of the best ways to make sure that certificates have been created correctly is to try connecting via a 
MQTT client with graphical interface.&lt;/p&gt;

&lt;p&gt;We recommend you download MQTT.fx from the following link https://mqttfx.jensd.de/&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open MQTT.fx and create a new connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_GCP_open.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Configure the connection as shown in the image below.
Previously you need to have created a project and the respective registry and device,
since unlike other clouds for the google connection you will need to indicate these parameters instead of the broker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Host name:&lt;/strong&gt; mqtt.googleapis.com&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_GCP_Connect.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;note that you will need to convert the pem file format. Use the command line&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl pkcs8 -topk8 -inform PEM -outform DER -in GCP_rsa_private.pem -out GCP_rsa_private.pkcs8 -nocrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Now that you are connected to the broker,
but you will have a series of restrictions to subscribe only to the default topics of the device.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Publish a new state in the topic&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_GCP_Topic_Publish.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Subscribe to Config and command topic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;pictures/MQTT/MQTTFX_GCP_Topic_Subscribe.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-start-with-the-project&quot;&gt;How to Start with the project&lt;/h1&gt;

&lt;p&gt;We will explain it to you later in detail how to play with it step by step, 
In this tutorial you need to be familiar with the following concepts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run a code file on your Arduino Board&lt;/li&gt;
  &lt;li&gt;Run a python server&lt;/li&gt;
  &lt;li&gt;Upload the credentials files to a Server&lt;/li&gt;
  &lt;li&gt;Update a configuration in IoT core console&lt;/li&gt;
  &lt;li&gt;Get the status from IoT core&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can connect to the internet and send your data through the UDP protocol.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arduino-board-run-a-code-file&quot;&gt;Arduino Board: Run a code file&lt;/h2&gt;

&lt;p&gt;For this Arduino project, it is necessary that you include some of the classes we have prepared exclusively 
for this tutorial. To do this, be sure to open the &lt;strong&gt;.ino&lt;/strong&gt; file from the following 
&lt;a href=&quot;../scripts/Arduino/Connection_UDP_command&quot;&gt;folder&lt;/a&gt;.
There are all the files you need.&lt;/p&gt;

&lt;p&gt;In the following code you can see the main structure of the program:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Measuring&lt;/li&gt;
  &lt;li&gt;Modem connection to the network&lt;/li&gt;
  &lt;li&gt;Sending of the measures&lt;/li&gt;
  &lt;li&gt;Disconnection of the modem to reduce power consumption&lt;/li&gt;
  &lt;li&gt;Sampling timeout
```c
}&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;void loop() {
  // put your main code here, to run repeatedly:&lt;/p&gt;

&lt;p&gt;Serial.println(“measuring…”);
  data.measurement();
  Serial.print(“- voltage: “);
  Serial.println(data.get_voltage());
  Serial.print(“- amperage: “); 
  Serial.println(data.get_amperage());&lt;/p&gt;

&lt;p&gt;Serial.println(“Sending… “);
  nbAccess.noLowPowerMode();
  send_data_UDP(data.get_voltage(), data.get_amperage()); 
  nbAccess.lowPowerMode();&lt;/p&gt;

&lt;p&gt;delay(polling);
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;But first of all, don't forget to complete the configuration 
[file](https://github.com/telefonicaid/iot-activation/blob/master/scripts/Arduino/Connection_UDP_command/configuration.h)

In the you have to complete the necessary information to complete the sending of information to the UDP server.
```c
// COMPLETE your information
#define SECRET_PINNUMBER &quot;&quot;

#define LOCAL_PORT 4114
#define IP_ADDRESS &quot;XX.XX.XX.XX&quot;

// SET your sampling time
#define POLL_TIME 10

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;udp-data-bridge-connecting-using-nb-iot-o-lte-m&quot;&gt;UDP data Bridge: Connecting using NB-IoT o LTE-M&lt;/h2&gt;

&lt;p&gt;One of the advantages of an iot device, is to be able to stop the connection when it is not necessary 
to decrease the energy consumption.&lt;/p&gt;

&lt;p&gt;From iot-activation we suggest you the deployment of a data bridge between the Arduino and the
Google Cloud IoT Core.&lt;/p&gt;

&lt;p&gt;This allows you to increase the intelligence of your devices by integrating the Kite Platform into this server,
and this add extra security in sending data over the network. 
By updating your Kite SIM information, the data bridge recognizes the SIM and automatically connects to
Google Cloud IoT core.&lt;/p&gt;

&lt;p&gt;Just make sure to add the name of the thing as one of the fields of the SIM in Kite.
&lt;a href=&quot;KitePlatform.html#sim-identification&quot;&gt;Kite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;BPDataBridge.html&quot;&gt;bridge&lt;/a&gt;
is the easiest way to connect to Google Cloud using only one UDP send&lt;/p&gt;

&lt;p&gt;📍
If you’re running the connection tests in The Thinx lab.
The SIM you use will not have connectivity with the Kite platform. So you will not be able to use the connection through our Bridge. 
Even so you have access to the internet and you will be able to perform any test on your infrastructure.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;################################# waiting for a new message #################################&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvfrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Message Received [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] from [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] : [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridge_routine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Generate ACK payload [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sent MESSAGE [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] to [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ] : [ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s ]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ack_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;check-the-events&quot;&gt;Check the events&lt;/h2&gt;

&lt;p&gt;With this script you can send voltage and current values that you will can saw&lt;/p&gt;

&lt;p&gt;In order to do this, it is necessary to create a subscription on the topic associated to each registry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_PubSub_topic_subscriptions_new.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_PubSub_subscriptions_new.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open a google cloud terminal and run the following command to check&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_PubSub_subscriptions_new_console.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud pubsub subscriptions pull projects/&amp;lt;project_id&amp;gt;/subscriptions/&amp;lt;subscriptions_name&amp;gt; --auto-ack --limit=100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before starting the execution you will see how his events are empty, and then the shipments 
of the registry devices will appear continuously.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-configuration&quot;&gt;Send configuration&lt;/h2&gt;

&lt;p&gt;To comunicate with the device you must use the configuration as explained in the previous section.
You can change this instruction as many times as needed.&lt;/p&gt;

&lt;p&gt;In this example you can turn off and endend the small LED on the board, but you are unrestricted to program
your own instructions. Feel free!&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Turn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Turn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/GCP/GCP_project_send_command.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents Arduino: MKR NB-1500 to Google Cloud IoT Getting started with the MKR NB-1500 What will you learn? What will you need? What is MQTT Generate your devices keys How to communicate with Google Cloud Test your Certificates with MQTT.fx How to Start with the project Arduino Board: Run a code file UDP data Bridge: Connecting using NB-IoT o LTE-M Check the Status Send configuration Arduino: MKR NB-1500 to Google Cloud IoT For this project, we will take different values from the Arduino board and publish them in Google Cloud. Getting started with the MKR NB-1500 What will you learn Control Arduino board MKR NB-1500 using the Arduino IDE Register a device on Google Cloud Generate credentials for devices Build a bridge between UDP and Google Cloud What will you need? Finish successfully the Arduino Starterkit tutorial Arduino board MKR NB-1500 Micro USB cable Arduino IDE GCP account KITE Platform Certificates files Telefónica SIMs with private APN (IPsec) Telefónica data Bridge If you have successfully completed the Arduino Starterkit tutorial, all the necessary software is already updated. What is MQTT MQTT is a machine-to-machine (M2M)/”Internet of Things” connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. The first concept is the publish and subscribe system. A device can publish a message on a topic, or it can be subscribed to a topic to receive messages Google Cloud use this system to communicate with your devices, For each device, google allow you to subscribe to the config and command topic to receive information. /devices/&amp;lt;device_name&amp;gt;/config /devices/&amp;lt;device_name&amp;gt;/command/# And publish in a topic to report the device state /devices/&amp;lt;device_name&amp;gt;/state Generate your devices keys To secure your devices, it is necessary to create a key pair (public/private) with which to validate any connection. The easiest way is to use openssl command in a unix console. the following example shows the commands with which to generate an RSA-256 private key with a 2048-bit key size. openssl genrsa -out GCP_rsa_private.pem 2048 openssl rsa -in GCP_rsa_private.pem -pubout -out GCP_rsa_public.pem once you’ve executed the commands, you should have the following files: GCP_rsa_private.pem: The private key that must be securely stored on the device and used to sign the authentication. GCP_rsa_public.pem: The public key that must be stored in Cloud IoT Core and used to verify the signature of the authentication. Remember to keep them well, the safety of your devices depends on it. you need add the public key on the cloud and the private key in your device, but if you decide to use our Data Bridge, you can only store it on the server. How to communicate with Google Cloud To manage your IoT devices you must access the IoT Core of your project. At a first glance you will be able to identify all your registries and create new ones if you need to. These records organize and classify your devices within the cloud, so you must have at least one created. But don’t worry, later you will see how they can be created automatically using the data Bridge connection. In the same way by accessing each registry, you can see the list of all the devices it contains. but in the same way accessing the Kite information will be able to create new devices automatically to detect new connections You can access into a device for check the state and update the configuration, in some cases, it is possible to send commands to the device as long as it is subscribed to the corresponding topic. In order to guarantee the security, you will have to associate the public keys created in the previous section. check history Google Cloud allows you to review up to a historical 10 previous states update state To publish in the device you will only have to publish in his corresponding topic. Do not forget that you must connect using the private key associated with the key of each device. /devices/&amp;lt;device_name&amp;gt;/state update config Click on the button update configuration to store a configuration, each time the device is subscribed to the topic will receive as a message the latest version of the configuration. /devices/&amp;lt;device_name&amp;gt;/config send command Click on the button send command to store a configuration, If the device is subscribed to the correct topic, it will receive as a message the sent command /devices/&amp;lt;device_name&amp;gt;/command/# but for this project we will use the configuration to send any command to the device. Test your Certificates with MQTT.fx One of the best ways to make sure that certificates have been created correctly is to try connecting via a MQTT client with graphical interface. We recommend you download MQTT.fx from the following link https://mqttfx.jensd.de/ Open MQTT.fx and create a new connection. Configure the connection as shown in the image below. Previously you need to have created a project and the respective registry and device, since unlike other clouds for the google connection you will need to indicate these parameters instead of the broker. Host name: mqtt.googleapis.com note that you will need to convert the pem file format. Use the command line openssl pkcs8 -topk8 -inform PEM -outform DER -in GCP_rsa_private.pem -out GCP_rsa_private.pkcs8 -nocrypt Now that you are connected to the broker, but you will have a series of restrictions to subscribe only to the default topics of the device. Publish a new state in the topic Subscribe to Config and command topic How to Start with the project We will explain it to you later in detail how to play with it step by step, In this tutorial you need to be familiar with the following concepts Run a code file on your Arduino Board Run a python server Upload the credentials files to a Server Update a configuration in IoT core console Get the status from IoT core Now you can connect to the internet and send your data through the UDP protocol. Arduino Board: Run a code file For this Arduino project, it is necessary that you include some of the classes we have prepared exclusively for this tutorial. To do this, be sure to open the .ino file from the following folder. There are all the files you need. In the following code you can see the main structure of the program: Measuring Modem connection to the network Sending of the measures Disconnection of the modem to reduce power consumption Sampling timeout ```c } void loop() { // put your main code here, to run repeatedly: Serial.println(“measuring…”); data.measurement(); Serial.print(“- voltage: “); Serial.println(data.get_voltage()); Serial.print(“- amperage: “); Serial.println(data.get_amperage()); Serial.println(“Sending… “); nbAccess.noLowPowerMode(); send_data_UDP(data.get_voltage(), data.get_amperage()); nbAccess.lowPowerMode(); delay(polling); } But first of all, don't forget to complete the configuration [file](https://github.com/telefonicaid/iot-activation/blob/master/scripts/Arduino/Connection_UDP_command/configuration.h) In the you have to complete the necessary information to complete the sending of information to the UDP server. ```c // COMPLETE your information #define SECRET_PINNUMBER &quot;&quot; #define LOCAL_PORT 4114 #define IP_ADDRESS &quot;XX.XX.XX.XX&quot; // SET your sampling time #define POLL_TIME 10 UDP data Bridge: Connecting using NB-IoT o LTE-M One of the advantages of an iot device, is to be able to stop the connection when it is not necessary to decrease the energy consumption. From iot-activation we suggest you the deployment of a data bridge between the Arduino and the Google Cloud IoT Core. This allows you to increase the intelligence of your devices by integrating the Kite Platform into this server, and this add extra security in sending data over the network. By updating your Kite SIM information, the data bridge recognizes the SIM and automatically connects to Google Cloud IoT core. Just make sure to add the name of the thing as one of the fields of the SIM in Kite. Kite This bridge is the easiest way to connect to Google Cloud using only one UDP send 📍 If you’re running the connection tests in The Thinx lab. The SIM you use will not have connectivity with the Kite platform. So you will not be able to use the connection through our Bridge. Even so you have access to the internet and you will be able to perform any test on your infrastructure. logger.info(&quot;################################# waiting for a new message #################################&quot;) udp_msg, udp_ip = sock.recvfrom(1024) ip = udp_ip[0] logger.info(&quot;Message Received [ %s ] from [ %s ] : [ %s ]&quot; % (udp_msg, udp_ip[0],udp_ip[1] )) response = bridge_routine(udp_msg, udp_ip[0], config_cloud) logger.debug(&quot;Generate ACK payload [ %s ]&quot; % response) ack_msg = json.dumps(response) logger.info(&quot;Sent MESSAGE [ %s ] to [ %s ] : [ %s ]&quot; % (ack_msg, udp_ip[0], udp_ip[1])) sock.sendto(ack_msg, udp_ip) Check the events With this script you can send voltage and current values that you will can saw In order to do this, it is necessary to create a subscription on the topic associated to each registry. Open a google cloud terminal and run the following command to check gcloud pubsub subscriptions pull projects/&amp;lt;project_id&amp;gt;/subscriptions/&amp;lt;subscriptions_name&amp;gt; --auto-ack --limit=100 Before starting the execution you will see how his events are empty, and then the shipments of the registry devices will appear continuously. Send configuration To comunicate with the device you must use the configuration as explained in the previous section. You can change this instruction as many times as needed. In this example you can turn off and endend the small LED on the board, but you are unrestricted to program your own instructions. Feel free! # Turn on led { 1 } # Turn off led { 2 }</summary></entry><entry><title type="html">Arduino Starterkit</title><link href="http://localhost:4000/ArduinoStarterKit.html" rel="alternate" type="text/html" title="Arduino Starterkit" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/ArduinoStarterKit</id><content type="html" xml:base="http://localhost:4000/ArduinoStarterKit.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#arduino-starterkit-for-iot-activation&quot;&gt;Arduino StarterKit for IoT-Activation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-arduino-&quot;&gt;What is Arduino?&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#arduino-mkr-nb-1500&quot;&gt;Arduino MKR NB-1500&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-your-arduino&quot;&gt;Getting started with your Arduino&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configure-arduino-ide&quot;&gt;Arduino IDE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#use-arduino-web-editor&quot;&gt;Arduino web editor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hello-world-create-your-first-arduino-program&quot;&gt;Hello World: Create your first Arduino program&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nb-iot-and-lte-m-setup-and-connection&quot;&gt;NB-IoT and LTE-M: Setup and Connection&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#connection&quot;&gt;Connection&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;arduino-starterkit-for-iot-activation&quot;&gt;Arduino StarterKit for IoT-Activation&lt;/h1&gt;

&lt;h2 id=&quot;what-is-arduino&quot;&gt;What is Arduino?&lt;/h2&gt;
&lt;p&gt;Arduino is an open-source electronics platform based on easy-to-use hardware. 
The Arduino software is easy for beginners and flexible enough for advanced users.&lt;/p&gt;

&lt;h3 id=&quot;arduino-mkr-nb-1500&quot;&gt;Arduino MKR NB-1500&lt;/h3&gt;
&lt;p&gt;The MKR branch of the Arduino board family is dedicated to the IoT solutions. It provides 
solutions for devices in remote locations without a high-speed Internet connection, or in situations where a power source isn’t available.&lt;/p&gt;

&lt;p&gt;The Arduino MKR NB 1500 adds wireless connectivity, Narrow Band IoT and LTE CAT M1, to the Arduino family. 
It is a  development board which contains the ATMEL SAMD21 micro controller, 
designed to integrate a low power-consumption core and a high performance.
The MKR NB 1500 brings the Arduino Zero functionalities in a smaller form factor.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
      &lt;img title=&quot;Arduino_NB1500&quot; src=&quot;pictures/Arduino/Arduino_NB1500.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h5 id=&quot;led-on&quot;&gt;LED ON&lt;/h5&gt;
&lt;p&gt;This LED is connected to the 5V input from either USB or VIN&lt;/p&gt;

&lt;h5 id=&quot;reset-button&quot;&gt;Reset button&lt;/h5&gt;
&lt;p&gt;This button allows you to reset the program contained in the board. It will make it run again from the beginning&lt;/p&gt;

&lt;h5 id=&quot;onboard-led&quot;&gt;Onboard LED&lt;/h5&gt;
&lt;p&gt;The onboard LED is connected to pin D6&lt;/p&gt;

&lt;h5 id=&quot;battery-connector&quot;&gt;Battery connector&lt;/h5&gt;
&lt;p&gt;If you want to connect a battery to your board be sure to attach it a female 2 pin JST PHR2 Type connector.&lt;/p&gt;

&lt;h5 id=&quot;led-charge&quot;&gt;LED charge&lt;/h5&gt;
&lt;p&gt;The indicator will remain on when the board receives 5V from VIN or USB, and the chip starts charging the Li-Po battery connected to the JST connector.&lt;/p&gt;

&lt;h5 id=&quot;antenna-connector&quot;&gt;Antenna connector&lt;/h5&gt;
&lt;p&gt;Allows you to connect an external antenna to receive and send RF signal&lt;/p&gt;

&lt;h3 id=&quot;arduino-antenna-gsm&quot;&gt;Arduino Antenna GSM&lt;/h3&gt;

&lt;p&gt;GSM antennas designed for mobile communications compatible with the Arduino board.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
      &lt;img title=&quot;Arduino_NB1500&quot; src=&quot;pictures/Arduino/Arduino_antenna_GSM.jpg&quot; width=&quot;300&quot; height=&quot;250&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;power-supply&quot;&gt;Power Supply&lt;/h3&gt;
&lt;p&gt;An electrical device that supplies electric power to your Arduino board&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
      &lt;img title=&quot;Arduino_PowerSupply&quot; src=&quot;pictures/Raspberry/Raspi_PowerSupply.png&quot; width=&quot;300&quot; height=&quot;250&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;telefónica-sim-card&quot;&gt;Telefónica SIM Card&lt;/h3&gt;
&lt;p&gt;This little one makes you enjoy all the advantages of the Telefónica network. 
Take care of it, It will be your partner into the IoT world.&lt;/p&gt;

&lt;p&gt;📍
Note that to insert it into the Arduino board you will need a microSIM.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
      &lt;img title=&quot;Telefonica_SIM&quot; src=&quot;pictures/miscellaneous/Telefonica_SIM.png&quot; width=&quot;300&quot; height=&quot;210&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;getting-started-with-your-arduino&quot;&gt;Getting started with your Arduino&lt;/h1&gt;

&lt;h2 id=&quot;configure-arduino-ide&quot;&gt;Configure Arduino IDE&lt;/h2&gt;

&lt;p&gt;Arduino platform provides an Integrated Development Environment (IDE). 
The first step to get started with the kit is to download the Arduino IDE from their web https://www.arduino.cc/en/Main/Software&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This environment provides not only an interface to develop your scripts. 
It is also your tool to download your files to the device.&lt;/p&gt;

&lt;p&gt;This development environment provides support for the different Arduino boards.
For this reason, before loading your software, you must select your board type.
If you want to program your MKR NB 1500 you need to install the Arduino Desktop IDE and add the Atmel SAMD Core. 
This simple procedure is done selecting &lt;strong&gt;Tools&lt;/strong&gt; menu, then &lt;strong&gt;Boards&lt;/strong&gt; and finally &lt;strong&gt;Boards Manager&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_boards_manager.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can search MKR NB 1500 to find the core. Click on its box and click the install button. 
Follow the download and install procedure, including the suitable drivers for your operating system to use the board.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_boards_manager_NB.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the SAMD Core is installed. NOw you are ready to select the corresponding Board.
Select the entry in the &lt;strong&gt;Tools &amp;gt; Board menu&lt;/strong&gt; that matchs to &lt;strong&gt;Arduino MKR NB-1500&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_board.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first time you connect your board, your computer will recognize it as a new device. 
However, you must configure the environment to indicate the port it has been connected.&lt;/p&gt;

&lt;p&gt;Connect your board to your computer you need a micro USB cable, and wait until your computer recognizes it.
Select the serial device port from  &lt;strong&gt;Tools &amp;gt; Serial Port menu&lt;/strong&gt;. 
It should be something like &lt;strong&gt;COMx&lt;/strong&gt; (COM1 and COM2 are usually reserved). 
if you can’t find the port used, you should disconnect your board and re-open the menu.
The entry that disappears should be the Arduino board. Reconnect the board and select that serial port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_com.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If It is your first time using the board, maybe during the compiling process some libraries could be not found.&lt;/p&gt;

&lt;p&gt;To avoid this error  you can import them by following these steps:&lt;/p&gt;

&lt;p&gt;Go to the menu &lt;strong&gt;sketch&lt;/strong&gt; and select &lt;strong&gt;Include library&lt;/strong&gt; to enter the &lt;strong&gt;Manage libraries…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_library_manager.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Search by board name &lt;strong&gt;MKR NB&lt;/strong&gt; to find the needed libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_library_manager_MKRNB.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now everything is ready to run your first script.&lt;/p&gt;

&lt;h2 id=&quot;use-arduino-web-editor&quot;&gt;Use Arduino web editor&lt;/h2&gt;

&lt;p&gt;Another alternative for development on Arduino boards without download anything, it is the new web editor 
https://create.arduino.cc/editor allowing the same development that on the desktop editor.&lt;/p&gt;

&lt;p&gt;If you want to use this online tool, you only need to register on the Arduino website and create a user account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_login.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This editor shows a friendly interface with the same functionalities. As you can see in the following screenshot&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_editor.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web editor is ready to use, you have to select your board and make sure you have an internet connection.
Because it will not be necessary to manage the libraries and the boards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_editor_board.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, you should try to find the model of your board, MKR NB 1500&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_editor_board_NB.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we mentioned before, you won’t need to manage the installed libraries, because the editor has access to the Arduino repository. 
However, it has the same tools to add the available libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_editor_library_manager_MKRNB.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To upload the code to your board, you should follow the same process that you would follow when you were using the IDE, 
however, being an online tool allows new options such as sharing the sketch using a url&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_WEB_editor_code_menu_upload.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-world-create-your-first-arduino-program&quot;&gt;Hello World: Create your first Arduino program&lt;/h2&gt;

&lt;p&gt;The Arduino programming language is based on Wiring, creating a simplified version of the C++ language.&lt;/p&gt;

&lt;p&gt;We show you  the typical structure of a program. This structure is created automatically when you open a new file&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Put your setup code here:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This part of the software will run only once when the program is started&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Use this code to initialize your device&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Put your main code here:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This part of the code is repeated constantly&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run your first program, copy the following code into the Arduino IDE or the web editor&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// put your setup code here, to run once:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// put your main code here, to run repeatedly:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; Hello World &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Great, you should be able to see something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_code.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do the last test. Compile and upload your code to the board.
But you’re lucky, the IDE will do  this for you. If an error occurs, It will appear at the console below&lt;/p&gt;

&lt;p&gt;To do this press the &lt;strong&gt;Upload&lt;/strong&gt; button that you will find below the menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_code_menu_upload.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, your software is already running on the board, and will restart every time you turn it on.&lt;/p&gt;

&lt;p&gt;But what the hell, your Arduino doesn’t have a screen where display text!
This is not a problem, as you have previously set up a serial connection to send messages.
So, your board is sending those messages through the USB cable connected to your pc.&lt;/p&gt;

&lt;p&gt;Effectively! again your Arduino IDE does it for you.
You can open a terminal to display all messages sent from the Arduino via serial communication.
Click on the lens icon to open it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_code_menu_serial_console.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can check that the message &lt;strong&gt;“Hello world”&lt;/strong&gt; is sent every 2 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_serial_console.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;assembling-antenna-and-microsim&quot;&gt;Assembling: Antenna and microSIM&lt;/h2&gt;

&lt;p&gt;The Arduino board has a very simple assembly, but make sure you’ve done it correctly or 
you won’t be able to make the connection.&lt;/p&gt;

&lt;p&gt;The SIM card must be in microSIM format, and must be fully inserted, with the metal face of the 
connector towards the inside of the board.&lt;/p&gt;

&lt;p&gt;To plug-in the GSM antenna, carefully press the connector and lock it in parallel.&lt;/p&gt;

&lt;h2 id=&quot;nb-iot-and-lte-m-setup-and-connection&quot;&gt;NB-IoT and LTE-M: Setup and Connection&lt;/h2&gt;

&lt;p&gt;Now that you’ve run your first arduino program. You need to learn how to set up the network connection. 
The Arduino board is equipped with a SARA-R410M modem.
It is a Ultra-compact LTE Cat M1 / NB1 and GPRS modules with multi-regional coverage.&lt;/p&gt;

&lt;p&gt;Not only allows you to select the type of network you want to connect to, 
but also to prepare the appropriate configuration to connect to the Movistar network in your country.&lt;/p&gt;

&lt;p&gt;Arduino will provide you with different examples and tools to perform the initial SARA’s module configuration. 
But we’ll teach you how to create your own configuration code.So you will be able to run it at the beginning of each new script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Arduino/Arduino_IDE_examples_mkrnb_tool.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:thumbsup: make sure that you had correctly configure the device before run the program due to the module will maintain 
the previous configuration in the case of not modifying it.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Before preparing the script, you should know that the communication between the board and the module is done 
by a lsit of instructions known as AT commands.&lt;/p&gt;

&lt;p&gt;These AT commands allow you, among other options, to select for example if you wanna connect to NB or LTE, or the band configuration the module should connect. This parameters will change according to your country.&lt;/p&gt;

&lt;p&gt;Here you will learn the basic commands to attach to Telefonica network.&lt;/p&gt;

&lt;p&gt;Here you can see an example of a [setup file]
(https://github.com/telefonicaid/iot-activation/blob/master/scripts/Arduino/Connection/setup_SaraR410M_movistar.h), 
but we’ll show you what those commands mean and how to select the appropriate parameters.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;  
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CFUN=15&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup_SaraR410M_movistar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//// Disconnecting from network&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+COPS=2&quot;); &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CFUN=0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   

  &lt;span class=&quot;c1&quot;&gt;//// Select Radio Access Technology (RAT)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// uncomment only 1 of the 4 options&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//// LTE only&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+URAT=7&quot;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// NB-IoT only&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+URAT=8&quot;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// LTE-M preferred, NB-IoT as failover&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+URAT=7,8&quot;); &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// NB-IoT preferred, LTE-M as failover&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+URAT=8,7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;////wait response&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//// Select Band bitmask &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// configure both masks if necessary (LTE-M and NB-IoT )&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//// configure bitmask for LTE-M (Band-20)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+UBANDMASK=0,524288&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// configure bitmask for NB-IoT (Band-20)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+UBANDMASK=1,524288&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

  &lt;span class=&quot;c1&quot;&gt;////configure the default values for Mobile Network Operators&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+UMNOPROF=0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;////configure the APN if you know it in (APN_NAME)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+CGDCONT=1,\&quot;IP\&quot;,\&quot;APN_NAME\&quot;&quot;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//MODEM.waitForResponse(2000, &amp;amp;response);  &lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;////// Configures the Extended Discontinuous Reception (eDRX).   &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CEDRXS=0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// in LTE-M&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// MODEM.sendf(&quot;AT+CEDRXS=2,4\&quot;0010\&quot;&quot;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//// or in NB-Iot&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// MODEM.sendf(&quot;AT+CEDRXS=2,5\&quot;0010\&quot;&quot;);    &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;////// Configures the Power Saving Mode (PSM).   &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CPSMS=0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;c1&quot;&gt;//MODEM.sendf(&quot;AT+CPSMS=1,\&quot;00100001\&quot;,\&quot;00100101\&quot;&quot;);  &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    
  &lt;span class=&quot;c1&quot;&gt;//// Applying changes and saving configuration&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now a short tutorial to configure the parameters&lt;/p&gt;

&lt;h5 id=&quot;select-radio-access-technology-rat&quot;&gt;Select Radio Access Technology (RAT)&lt;/h5&gt;

&lt;p&gt;RAT is the underlying physical connection method for a radio based communication network.&lt;/p&gt;

&lt;p&gt;The SARA module of your Arduino allows you to select different technologies such as GSM, LTE/NB …
and a fallback technology in case the primary one won’t be available.&lt;/p&gt;

&lt;p&gt;For our purpose we will focus on the lowest consumption technologies such as LTE and NB, 
as they are specific technologies for use in IoT.&lt;/p&gt;

&lt;p&gt;This configuration will be done using the AT command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+URAT=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;According to the assigned value, it will allow you to choose between the following cases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LTE only                              &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+URAT=7&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;NB-IoT only                           &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+URAT=8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;LTE-M preferred, NB-IoT as failover   &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+URAT=7,8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;NB-IoT preferred, LTE-M as failover   &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+URAT=8,7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As indicated, the value 7 corresponds to LTE and 8 to NB&lt;/p&gt;

&lt;h5 id=&quot;select-band&quot;&gt;Select Band&lt;/h5&gt;

&lt;p&gt;The module supports a series of 4G LTE bands for the different radio access technologies (RAT).&lt;/p&gt;

&lt;p&gt;This configuration is done through a bitmask. So you will have to configure both NB and LTE bitmask.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for configure LTE-M bitmask use the AT command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+UBANDMASK=0,&amp;lt;Bands&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;for configure LTE-M bitmask use the AT command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+UBANDMASK=1,&amp;lt;Bands&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But how do you calculate the mask for each band? this is very simple.&lt;/p&gt;

&lt;p&gt;Take a look to these examples.&lt;/p&gt;

&lt;p&gt;for example, if you want to activate the European band (B20), you will make sure that the mask has bit 20 activated.&lt;/p&gt;

&lt;p&gt;It is only necessary to translate the number from binary to decimal&lt;/p&gt;

&lt;p&gt;just do the following calculation&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BX   -&amp;gt;  2^( X-1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;examples:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;B3   -&amp;gt;  2^( 3-1) = 4 
B4   -&amp;gt;  2^( 4-1) = 8
B20  -&amp;gt;  2^(20-1) = 524288
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and so on ….&lt;/p&gt;

&lt;p&gt;It is also very easy if you need to activate multiple bands. Sum them all!&lt;/p&gt;

&lt;p&gt;for bands 3 and 4 simultaneously:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B3 &amp;amp; B4  -&amp;gt;  2^( 4-1) + 2^( 3-1) = 12&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can always use a calculator!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;configure-the-consumption&quot;&gt;Configure the consumption:&lt;/h5&gt;

&lt;p&gt;One of the main goals from de device perspective is the battery energy consumption.&lt;/p&gt;

&lt;h6 id=&quot;extended-discontinuous-reception&quot;&gt;Extended Discontinuous Reception&lt;/h6&gt;

&lt;p&gt;Extended discontinuous reception (eDRX) is a way that mobile communication are used to save the battery of the mobile device.&lt;/p&gt;

&lt;p&gt;The mobile device and the network negotiate in each data transfer. 
from time to time the device turns off goes into a low power state.&lt;/p&gt;

&lt;p&gt;You can activate and configure this option using one of the AT commands &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+CEDRXS=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Although the network will decice it, it is possible to configure the modem to select eDRX times.&lt;/p&gt;

&lt;h6 id=&quot;power-saving-mode&quot;&gt;Power Saving Mode&lt;/h6&gt;

&lt;p&gt;Power save mode (PSM) means that the device notifies the network that it is going to be inactive, 
so it will turn the radio interface after a while.&lt;/p&gt;

&lt;p&gt;Using AT commands, you can activate this mode to determine the schedule times. &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+CPSMS=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;these consumption modes are really important as they can improve the battery life in IoT devices.&lt;/p&gt;

&lt;p&gt;Now that you are an expert about energy modes. You’ll learn how these are integrated into the communication process.
Out of the box, the device will perform an attachment stage to connect to the mobile network. This step will be performed 
whenever the device is reconnected to the network, resulting in a process with a very high power consumption.&lt;/p&gt;

&lt;p&gt;Once the attachment is done and the data was sent, the device will keep waiting for a few seconds depending on the connection 
technology  (NB-IoT or LTE-M) and it will go to the IDLE stage.
During the IDLE stage, the device will maintain the connection to the network. 
This connection is maintained by swapping short periods of data exchange with the network with periods of workless. 
If you review the consumption graph, you can notice how during the IDLE stage a series of square pulses appears.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_transmision.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But how do these savings modes fit into the cycle? As expected, both modes are involved in the IDLE stage.
The device will remain in this stage for most of the cycle.&lt;/p&gt;

&lt;p&gt;If you activate the eDRX, a new cycle will be established during the IDLE stage,It will be repeated continuously, 
maintaining a resting stage during part of the cycle. With the AT command, you can select both, the total time of the new cycle 
and the time during which the communication takes place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_transmision_eDRX.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the PSM is activated, the device will perform the IDLE stage and then turn off the antenna. 
But as we mentioned earlier, every time we connect to the network, attachment will be done again. 
Well! the advantage of the PSM is that when you configured it, the device warns the network  the time it remains deactivated, 
so the network will keep the configuration of the device even if the antenna is off. 
Finally, the device will alert the network again of its connection but without the attachment process, so It saves time and energy.&lt;/p&gt;

&lt;p&gt;Using the AT command, it is possible to determine the total cycle time, 
which contains both the IDLE connection time and the workless time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_transmision_PSM.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both saving modes can be combined and used together. This allows you to reduce energy consumption in cases 
where you do not need continuous communication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_transmision_eDRX_PSM.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;how-to-set-the-timers&quot;&gt;How to set the timers:&lt;/h5&gt;
&lt;p&gt;Although the mode configuration is a negotiation between device and network, 
the network has the final decision, using the AT command you can activate/deactivate both modes 
as well as configure their cycle times.&lt;/p&gt;

&lt;h6 id=&quot;--edrx&quot;&gt;- eDRX&lt;/h6&gt;

&lt;p&gt;You can disable it with command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+CEDRXS=0,4&lt;/code&gt; in LTE-M or with command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+CEDRXS=0,5&lt;/code&gt; for NB-IoT.&lt;/p&gt;

&lt;p&gt;Effectively the code 4 or 5 will serve you to identify the type of connection you want to configure!!&lt;/p&gt;

&lt;p&gt;To activate it you must do exactly the same thing, but changing the 0 for a 2, 
although this time you will have to add a code of 4 digits to configure the cycle time.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Activate eDRX: 20,48s in LTE-M&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CEDRXS=2,4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0010&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Activate eDRX: 20,48s in NB-IoT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MODEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AT+CEDRXS=2,5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0010&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Activate eDRX: 40,96s in LTE-M&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CEDRXS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0011&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Activate eDRX: 40,96s in NB-IoT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CEDRXS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0011&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you can check the rest of the values in the table&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_table_value_DRX.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;--psm&quot;&gt;- PSM&lt;/h6&gt;

&lt;p&gt;Disable with command &lt;code class=&quot;highlighter-rouge&quot;&gt;AT+CPSMS=0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To activate the PSM, you only have to select the value to one and configure 
the time of the cycle (IDLE + PSM) and time of connection (IDLE) copying the codes from the table.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-AT&quot;&gt;** Activate PSM: 1h of cycle / 5m resting&quot;
AT+CPSMS=1,&quot;00100001&quot;,&quot;00100101&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To complete the code of each timer, select the first 3 digits of the PSM table and complete them 
with the last 5 digits with are the multiplying factor in binary code&lt;/p&gt;

&lt;p&gt;follow the example below&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//IDLE + PSM:&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00010&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00010&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//IDLE:&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00010&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;try with a complete example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-AT&quot;&gt;** Activate PSM: 1h of cycle / 5m resting&quot;
//IDLE + PSM:
001 00001 -&amp;gt; 1 hour * 1 = 1 hour
//IDLE:
101 00101 -&amp;gt; 1 min  * 5 = 5 min
//PSM
1hour - 5 min = 55 min

AT+CPSMS=1,&quot;00100001&quot;,&quot;00100101&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;pictures/schematics/LTE_table_value_PSM.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;📍
For the current Arduino board it is not recommended to use the PSM mode. 
The board doesn’t have a reset system. If the board is switched off during the PSM, the module will remain off.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// (default and factory-programmed value): disable the use of PSM.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// disable the use of PSM and reset all parameters for PSM to factory-programmed values.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPSMS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;connection&quot;&gt;Connection&lt;/h3&gt;

&lt;p&gt;Now that you know how to configure your modem to perform a correct connection.&lt;/p&gt;

&lt;p&gt;You will be able to execute the following 
&lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Arduino/Connection&quot;&gt;code&lt;/a&gt; 
with which to connect to the Telefonica network. Let the games begin!&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;START setup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//setup modem Sara R410M&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;setup_SaraR410M_movistar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Testing Modem:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IMEI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_modem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Modem's IMEI: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMEI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Try Connecting....&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PINNUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NB_READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gprs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attachGPRS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPRS_READY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;connected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not connected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;END setup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this software test, you will be able to check the connection of your SIM card and check
the access to the NB-IoT network.&lt;/p&gt;

&lt;p&gt;Open the Arduino IDE Serial Monitor to check if the connection between the module and the network is correct&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START setup
Testing Modem:
- Starting modem test...
- Modem is connected
- Checking IMEI...
- Modem is functioning properly
- Resetting modem...
- Modem is functioning properly
Modem's IMEI: xxxxxxxxxxxxxxx
NB-IoT networks scanner
Scanning Networks:
1
Try Connecting....
Connected
END setup
Connected
Connected
[...]
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents</summary></entry><entry><title type="html">Asset Tracking</title><link href="http://localhost:4000/BPAssetTracking.html" rel="alternate" type="text/html" title="Asset Tracking" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/BPAssetTracking</id><content type="html" xml:base="http://localhost:4000/BPAssetTracking.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-asset-tracking&quot;&gt;What is Asset Tracking?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-do-we-need-asset-tracking&quot;&gt;Why do we need Asset Tracking?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-does-it-do&quot;&gt;What does it do?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-get-started&quot;&gt;How to get started&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#how-activate-location-service&quot;&gt;How Activate Location Service&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-run-it&quot;&gt;How to run it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-asset-tracking&quot;&gt;What is Asset Tracking?&lt;/h1&gt;

&lt;p&gt;Today, geo-location of devices is one of the most demanded skills in the IoT world.
This growing demand arises from the need to be able to locate our devices at any moment.&lt;/p&gt;

&lt;p&gt;Utilities like locating our car in the parking lot of a shopping center, or simply finding our keys in the lounge of our house.7
Tells us that these new utilities will be even more demanded by consumers in the coming years.&lt;/p&gt;

&lt;p&gt;Now let’s be honest, not only do customers benefit from these new technologies, 
more and more companies are investing money and effort in being able to locate the location of their assets.
It is not only necessary to know the state of our devices, also to be able to locate them quickly.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-need-asset-tracking&quot;&gt;Why do we need Asset Tracking?&lt;/h2&gt;

&lt;p&gt;The technology has greatly facilitated us to have GPS modules easy to install in any device, 
but for small devices of low consumption, not only cause us an increase in the final price of the 
device but also an increase in the size that has cost so much to reduce, including the payment of a higher battery consumption.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Telefónica’s solution?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The solution is the &lt;a href=&quot;KitePlatform.html&quot;&gt;Kite Platform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through the managed connection, you can access the location of the SIM using the Telefónica network coverage.&lt;/p&gt;

&lt;p&gt;It’s easy, you just have to activate the Location Service of your SIM in Kite&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AssetTracking/AssetTracking_kite_location_on.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h2&gt;

&lt;p&gt;Soon ..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-does&quot;&gt;What it does?&lt;/h2&gt;

&lt;p&gt;Soon ..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;/h1&gt;

&lt;h2 id=&quot;how-activate-location-service&quot;&gt;How Activate Location Service&lt;/h2&gt;

&lt;p&gt;First Go to &lt;strong&gt;SIM Inventory&lt;/strong&gt; / &lt;strong&gt;Select your SIM&lt;/strong&gt; / and Press &lt;strong&gt;Activate&lt;/strong&gt; on the bottom-menu&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Kite/Kite_HowTo_SIM_Activate_Service.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;find the option &lt;strong&gt;Activate Location&lt;/strong&gt; and click it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Kite/Kite_HowTo_SIM_Activate_Service_location.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new window is open! Click in &lt;strong&gt;Activation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Kite/Kite_HowTo_SIM_Activate_Service_location_config.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the service is activated click on &lt;strong&gt;Finish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Kite/Kite_HowTo_SIM_Activate_Service_location_config_done.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-run-it&quot;&gt;How to run it&lt;/h1&gt;

&lt;p&gt;Soon …&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents What is Asset Tracking? Why do we need Asset Tracking? What will you need? What does it do? How to get started How Activate Location Service How to run it What is Asset Tracking? Today, geo-location of devices is one of the most demanded skills in the IoT world. This growing demand arises from the need to be able to locate our devices at any moment. Utilities like locating our car in the parking lot of a shopping center, or simply finding our keys in the lounge of our house.7 Tells us that these new utilities will be even more demanded by consumers in the coming years. Now let’s be honest, not only do customers benefit from these new technologies, more and more companies are investing money and effort in being able to locate the location of their assets. It is not only necessary to know the state of our devices, also to be able to locate them quickly. Why do we need Asset Tracking? The technology has greatly facilitated us to have GPS modules easy to install in any device, but for small devices of low consumption, not only cause us an increase in the final price of the device but also an increase in the size that has cost so much to reduce, including the payment of a higher battery consumption. What is Telefónica’s solution? The solution is the Kite Platform Through the managed connection, you can access the location of the SIM using the Telefónica network coverage. It’s easy, you just have to activate the Location Service of your SIM in Kite What will you need? Soon .. What it does? Soon .. How to get started How Activate Location Service First Go to SIM Inventory / Select your SIM / and Press Activate on the bottom-menu find the option Activate Location and click it. A new window is open! Click in Activation Now the service is activated click on Finish How to run it Soon …</summary></entry><entry><title type="html">Bootstraping</title><link href="http://localhost:4000/BPBootstraping.html" rel="alternate" type="text/html" title="Bootstraping" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/BPBootstraping</id><content type="html" xml:base="http://localhost:4000/BPBootstraping.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#bootstraping&quot;&gt;Bootstraping&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-do-we-need-bootstraping&quot;&gt;Why do we need Bootstraping?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-does-it-do&quot;&gt;What does it do?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-get-started&quot;&gt;How to get started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-bootstraping&quot;&gt;What is Bootstraping?&lt;/h1&gt;

&lt;p&gt;If we told you that your device could be anything you wanted, we wouldn’t be telling you anything you didn’t already know.&lt;/p&gt;

&lt;p&gt;But if we tell you now that your device may be something different depending on the SIM you use.
Would it change anything?&lt;/p&gt;

&lt;p&gt;This could be very helpful, if you control a wide variety of devices.&lt;/p&gt;

&lt;p&gt;IoT-Activation offers you this possibility!!&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-need-bootstraping&quot;&gt;Why do we need Bootstraping?&lt;/h2&gt;

&lt;p&gt;Imagine making all your devices completely the same and configuring their operation only through the connection they use. 
In case of failure, you will only need to replace the old SIM in your new device. 
Easy, isn’t it?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h2&gt;

&lt;p&gt;Soon ..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-does&quot;&gt;What it does?&lt;/h2&gt;

&lt;p&gt;Soon ..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;/h1&gt;

&lt;p&gt;Soon ..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents Bootstraping Why do we need Bootstraping? What will you need? What does it do? How to get started What is Bootstraping? If we told you that your device could be anything you wanted, we wouldn’t be telling you anything you didn’t already know. But if we tell you now that your device may be something different depending on the SIM you use. Would it change anything? This could be very helpful, if you control a wide variety of devices. IoT-Activation offers you this possibility!! Why do we need Bootstraping? Imagine making all your devices completely the same and configuring their operation only through the connection they use. In case of failure, you will only need to replace the old SIM in your new device. Easy, isn’t it? What will you need? Soon .. What it does? Soon .. How to get started Soon ..</summary></entry><entry><title type="html">Cloud Connector</title><link href="http://localhost:4000/BPCloudConnector.html" rel="alternate" type="text/html" title="Cloud Connector" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/BPCloudConnector</id><content type="html" xml:base="http://localhost:4000/BPCloudConnector.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-cloud-connector&quot;&gt;What is Cloud Connector?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#benefits-of-using-cloud-connector&quot;&gt;Benefits of using Cloud Connector&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#available-information&quot;&gt;Available information&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-get-it&quot;&gt;How to get it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-cloud-connector&quot;&gt;What is Cloud Connector?&lt;/h1&gt;

&lt;p&gt;Cloud Connector is a service that publish on different public cloud the SIM and
connectivity information available on the Kite Platform as your device does. 
It allows you to manage the information of your SIM’s as a resource from your devices
With just a configuration change, network, consumption and location data can be sent to the Cloud&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/CloudConnector/CloudConnector_diagram.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With some effort and imagination, you can do amazing things.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-using-cloud-connector&quot;&gt;Benefits of using Cloud Connector&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Integration cost and time reduction: customers don’t need to make complex integration between Kite and the Cloud platform.&lt;/li&gt;
  &lt;li&gt;Unique information source&lt;/li&gt;
  &lt;li&gt;Business logic built over network data:
    &lt;ul&gt;
      &lt;li&gt;Detect when a device is being used for another purpose than expected&lt;/li&gt;
      &lt;li&gt;Device is having technical issues or poor performance&lt;/li&gt;
      &lt;li&gt;Cross information with other sources (operation systems, logistics, …)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;available-information&quot;&gt;Available information&lt;/h2&gt;

&lt;p&gt;The Kite Platform parameters set that are transferred to the public cloud platforms are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Level: named as “presenceLevel”&lt;/li&gt;
  &lt;li&gt;IP&lt;/li&gt;
  &lt;li&gt;Cause: named as “event”&lt;/li&gt;
  &lt;li&gt;Timestamp&lt;/li&gt;
  &lt;li&gt;Automatic Location: shown as “Latitude and Longitude” in the JSON&lt;/li&gt;
  &lt;li&gt;APN&lt;/li&gt;
  &lt;li&gt;Operator&lt;/li&gt;
  &lt;li&gt;Daily Consumption: Voice (in seconds), Data in kB), SMS&lt;/li&gt;
  &lt;li&gt;IMEI&lt;/li&gt;
  &lt;li&gt;Comms Module Module&lt;/li&gt;
  &lt;li&gt;Comms Module Manufacturer&lt;/li&gt;
  &lt;li&gt;Life Cycle Status&lt;/li&gt;
  &lt;li&gt;Activation Date&lt;/li&gt;
  &lt;li&gt;Alias&lt;/li&gt;
  &lt;li&gt;ICCID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is an example of the information dumped in the public cloud from the Kite
Platform:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;reported&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;country&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ES&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commsModModel&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HUAWEI&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;E3276s-150&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commsModManufacturer&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HUAWEI&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Technologies&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Co&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ltd&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imei&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;863781010957232&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iccid&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8952031422900140636&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alias&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8952031422900140636&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;event&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ACCOUNTING_RADIUS_START&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dailyVoice&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dailySMS&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dailyData&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;apn&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mconnect.pre.telefonica.com&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lifeCycleStatus&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ACTIVATION_READY&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;operator&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Telefonica&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Moviles&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;España&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1560850561000&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;activationDate&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1525947198000&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Latitude&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;42.6217&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Longitude&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-7.767138&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;presenceLevel&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GPRS&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ip&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;172.18.213.250&quot;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📍
The first time the SIM cards are registered in the Supervision group, all the
parameters are published in the public cloud, thereafter, only in case of any change.
There are no periodic updates of any parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-it&quot;&gt;How to get it&lt;/h2&gt;

&lt;p&gt;Contact your Kite Provider and ask for it. Very soon you will be able to activate this service from your Kite platform.&lt;/p&gt;

&lt;p&gt;If you already have the SIM cloud monitoring service available, you will have the option
to activate the service for all SIM cards you wants, by including them in a
Monitoring Group and activating Cloud Monitoring (ON mode).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents What is Cloud Connector? Benefits of using Cloud Connector Available information How to get it What is Cloud Connector? Cloud Connector is a service that publish on different public cloud the SIM and connectivity information available on the Kite Platform as your device does. It allows you to manage the information of your SIM’s as a resource from your devices With just a configuration change, network, consumption and location data can be sent to the Cloud With some effort and imagination, you can do amazing things. Benefits of using Cloud Connector Integration cost and time reduction: customers don’t need to make complex integration between Kite and the Cloud platform. Unique information source Business logic built over network data: Detect when a device is being used for another purpose than expected Device is having technical issues or poor performance Cross information with other sources (operation systems, logistics, …) Available information The Kite Platform parameters set that are transferred to the public cloud platforms are: Level: named as “presenceLevel” IP Cause: named as “event” Timestamp Automatic Location: shown as “Latitude and Longitude” in the JSON APN Operator Daily Consumption: Voice (in seconds), Data in kB), SMS IMEI Comms Module Module Comms Module Manufacturer Life Cycle Status Activation Date Alias ICCID Below is an example of the information dumped in the public cloud from the Kite Platform: &quot;reported&quot;: { &quot;country&quot;: &quot;ES&quot;, &quot;commsModModel&quot;: &quot;HUAWEI E3276s-150&quot;, &quot;commsModManufacturer&quot;: &quot;HUAWEI Technologies Co Ltd&quot;, &quot;imei&quot;: &quot;863781010957232&quot;, &quot;iccid&quot;: &quot;8952031422900140636&quot;, &quot;alias&quot;: &quot;8952031422900140636&quot;, &quot;event&quot;: &quot;ACCOUNTING_RADIUS_START&quot;, &quot;dailyVoice&quot;: 0, &quot;dailySMS&quot;: 0, &quot;dailyData&quot;: 0, &quot;apn&quot;: &quot;mconnect.pre.telefonica.com&quot;, &quot;lifeCycleStatus&quot;: &quot;ACTIVATION_READY&quot;, &quot;operator&quot;: &quot;Telefonica Moviles España&quot;, &quot;timestamp&quot;: 1560850561000, &quot;activationDate&quot;: 1525947198000, &quot;Latitude&quot;: 42.6217, &quot;Longitude&quot;: -7.767138, &quot;presenceLevel&quot;: &quot;GPRS&quot;, &quot;ip&quot;: &quot;172.18.213.250&quot; } 📍 The first time the SIM cards are registered in the Supervision group, all the parameters are published in the public cloud, thereafter, only in case of any change. There are no periodic updates of any parameter. How to get it Contact your Kite Provider and ask for it. Very soon you will be able to activate this service from your Kite platform. If you already have the SIM cloud monitoring service available, you will have the option to activate the service for all SIM cards you wants, by including them in a Monitoring Group and activating Cloud Monitoring (ON mode).</summary></entry><entry><title type="html">Data Bridge</title><link href="http://localhost:4000/BPDataBridge.html" rel="alternate" type="text/html" title="Data Bridge" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/BPDataBridge</id><content type="html" xml:base="http://localhost:4000/BPDataBridge.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-the-data-bridge&quot;&gt;What is Data Bridge?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-do-we-need-the-data-bridge&quot;&gt;Why do we need Data Bridge?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-our-bridge-is-already-doing&quot;&gt;What our bridge is already doing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#whats-it-gonna-do-next&quot;&gt;What’s it gonna do next?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-the-data-bridge&quot;&gt;What is The Data Bridge?&lt;/h1&gt;

&lt;p&gt;Data Bridge is a Python script. It can be deployed in any machine as a server.
It enables the connection between public clouds IoT Core services and UDP messages.
As a result, It will send back a message to the device with the publish code.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-need-the-data-bridge&quot;&gt;Why do we need the Data Bridge?&lt;/h2&gt;

&lt;p&gt;Among the communication protocols, MQTT is well known due to it is really easy to use and it secures the communication through a TLS context, although from the energetic perspective it is quite aggressive. You shouldn’t choose between security and battery… so the Data Bridge will make your day :).&lt;/p&gt;

&lt;p&gt;We wanna show you a energy consumption comparison: We sent 300 bytes packet with the same device and the result looks as follows …&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;Consumption MQTT with TLS&lt;/div&gt;&lt;/th&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;Consumption MQTT&lt;/div&gt;&lt;/th&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;Consumption UDP&lt;/div&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
	&lt;th&gt;
		&lt;img src=&quot;pictures/miscellaneous/consumption_chart_NB_MQTTTLS.png&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
	&lt;/th&gt;
	&lt;th&gt;
		&lt;img src=&quot;pictures/miscellaneous/consumption_chart_NB_MQTT.png&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
	&lt;/th&gt;
	&lt;th&gt;
		&lt;img src=&quot;pictures/miscellaneous/consumption_chart_NB_UDP.png&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
	&lt;/th&gt;
  &lt;/tr&gt;
	&lt;tr&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;
			Secure data transfer &lt;br /&gt;
			with high power consumption&lt;/div&gt;&lt;/th&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;
			Unsecured data transfer &lt;br /&gt;
			(30% savings compared to TLS)&lt;/div&gt;&lt;/th&gt;
	&lt;th&gt;&lt;div align=&quot;center&quot;&gt;
			Security provided by Telefónica's network &lt;br /&gt;
			(50% savings compared to MQTT + TLS)&lt;/div&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-our-bridge-is-already-doing&quot;&gt;What our bridge is already doing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It accesses to Kite Platform to retrieve your custom information (the device name and topic)&lt;/li&gt;
  &lt;li&gt;It received a UDP message and it publishes in the Cloud.&lt;/li&gt;
  &lt;li&gt;It returns a message with the process result and commands&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-it-gonna-do-next&quot;&gt;What’s it gonna do next?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Compatibility with other clouds&lt;/li&gt;
  &lt;li&gt;Deploy your Bridge in One Click&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A Linux instance on a Public Cloud&lt;/li&gt;
  &lt;li&gt;Python Interpreter&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;KitePlatform.html#access-step-by-step-using-the-curl-command&quot;&gt;KITE Platform&lt;/a&gt; Certificates files&lt;/li&gt;
  &lt;li&gt;IpSec Service provided by Telefonica &lt;a href=&quot;BPIPsec.html&quot;&gt;(IPsec)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📍
For the time being, If you use a SIM from the Thinx, you will not have access to the Kite Platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;to-continue-with-the-installation-select-your-public-cloud&quot;&gt;To continue with the installation select your Public Cloud&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;
	&lt;th&gt;
		&lt;a href=&quot;BPDataBridgeAWS.html&quot; align=&quot;center&quot;&gt;
			&lt;img src=&quot;pictures/AWS/AWS_logo.png&quot; width=&quot;350&quot; height=&quot;225&quot; /&gt;
		&lt;/a&gt;
	&lt;/th&gt;
	&lt;th&gt;
		&lt;img src=&quot;pictures/portfolio/portfolio_white.png&quot; width=&quot;75&quot; height=&quot;1&quot; /&gt;
	&lt;/th&gt;
	&lt;th&gt;
		&lt;a href=&quot;BPDataBridgeGoogleCloud.html&quot; align=&quot;center&quot;&gt;
			&lt;img src=&quot;pictures/GCP/GCP_logo.png&quot; width=&quot;350&quot; height=&quot;225&quot; /&gt;
		&lt;/a&gt;
	&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents What is Data Bridge? Why do we need Data Bridge? What our bridge is already doing What’s it gonna do next? What will you need? What is The Data Bridge? Data Bridge is a Python script. It can be deployed in any machine as a server. It enables the connection between public clouds IoT Core services and UDP messages. As a result, It will send back a message to the device with the publish code. Why do we need the Data Bridge? Among the communication protocols, MQTT is well known due to it is really easy to use and it secures the communication through a TLS context, although from the energetic perspective it is quite aggressive. You shouldn’t choose between security and battery… so the Data Bridge will make your day :). We wanna show you a energy consumption comparison: We sent 300 bytes packet with the same device and the result looks as follows … Consumption MQTT with TLS Consumption MQTT Consumption UDP Secure data transfer with high power consumption Unsecured data transfer (30% savings compared to TLS) Security provided by Telefónica's network (50% savings compared to MQTT + TLS) What our bridge is already doing It accesses to Kite Platform to retrieve your custom information (the device name and topic) It received a UDP message and it publishes in the Cloud. It returns a message with the process result and commands What’s it gonna do next? Compatibility with other clouds Deploy your Bridge in One Click What will you need? A Linux instance on a Public Cloud Python Interpreter KITE Platform Certificates files IpSec Service provided by Telefonica (IPsec) 📍 For the time being, If you use a SIM from the Thinx, you will not have access to the Kite Platform. To continue with the installation select your Public Cloud</summary></entry><entry><title type="html">Data Bridge on AWS</title><link href="http://localhost:4000/BPDataBridgeAWS.html" rel="alternate" type="text/html" title="Data Bridge on AWS" /><published>2019-02-06T13:00:00+01:00</published><updated>2019-02-06T13:00:00+01:00</updated><id>http://localhost:4000/BPDataBridgeAWS</id><content type="html" xml:base="http://localhost:4000/BPDataBridgeAWS.html">&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-does-it-do&quot;&gt;What does it do?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#aws-options&quot;&gt;AWS Options:&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-option-1-telemetry&quot;&gt;AWS Option 1: Telemetry&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-option-2-telemetry-and-commands&quot;&gt;AWS Option 2: Telemetry and Commands&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy-and-defend-your-bridge-on-aws&quot;&gt;Deploy and defend your Bridge on AWS!&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-will-you-need&quot;&gt;What will you need?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#data-bridge-python-code&quot;&gt;Data Bridge python code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kite-platform-certificates&quot;&gt;KITE Platform certificates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ipsec-tunnel-configuration-between-telefónica-and-aws&quot;&gt;IPsec tunnel configuration between Telefónica and AWS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#amazon-web-services-cloud-computing-services&quot;&gt;Amazon Web Services Cloud Computing Services&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-identity-and-access-management-iam&quot;&gt;AWS Identity and Access Management (IAM)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-systems-manager-parameter-store&quot;&gt;AWS Systems Manager Parameter Store&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#aws-iot-core&quot;&gt;AWS IoT Core&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#amazon-elastic-compute-cloud-ec2&quot;&gt;Amazon Elastic Compute Cloud (EC2)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-run-it&quot;&gt;How to run it&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#download-it&quot;&gt;Download it&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configure-it&quot;&gt;Configure it&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#launch-it&quot;&gt;Launch it&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-does-it-do&quot;&gt;What does it do?&lt;/h1&gt;

&lt;p&gt;Each UDP message sent by a device, it is linked to several information such as source IP, destination IP and destination Port. 
The Bridge will use the device source IP to gather all the sim information stored at Kite platform.&lt;/p&gt;

&lt;p&gt;For the tutorial purpose you should pay attention to SIM’s custom fields, 
that you can manage from your Kite Platform account.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Field 1&lt;/strong&gt; : Device Cloud Name (required) -&amp;gt; this is the name that will appear at the cloud (shadow name, twin name …)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Field 2&lt;/strong&gt; : topic to publish (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the content of the fields, the Bridge will act differently.&lt;/p&gt;

&lt;p&gt;To choose between the different options you have to configure SIM information at the &lt;a href=&quot;KitePlatform.html#edit-custom-field&quot;&gt;Custom Field&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📍
The device name is a mandatory field, otherwise an error code will be returned, because the bridge wouldn’t know the virtual representation of the physical device.&lt;/p&gt;

&lt;p&gt;As we said before, There are two ways of working depending on the information provided as custom parameter in Kite.&lt;/p&gt;

&lt;h2 id=&quot;aws-options&quot;&gt;AWS Options:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#aws-option-1-telemetry&quot;&gt;AWS Option 1: Telemetry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aws-option-2-telemetry-and-commands&quot;&gt;AWS Option 2: Telemetry and Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aws-option-1-telemetry&quot;&gt;AWS Option 1: Telemetry&lt;/h4&gt;

&lt;p&gt;This is the most straight forward option. 
You only have to provide a device cloud name at the first custom parameter in Kite. 
As a result all the messages sent by your device will be published at the default topic.&lt;/p&gt;

&lt;p&gt;The default topic has this structure:  &lt;strong&gt;tlm/{DEVICE_NAME_IN_KITE}/raw&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Otherwise, If you prefer to send your device messages to another topic, you should add it as a second custom field at Kite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Bridge/Bridge_overview_AWS_option1y2.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aws-option-2-telemetry-and-commands&quot;&gt;AWS Option 2: Telemetry and Commands&lt;/h4&gt;

&lt;p&gt;The configuration is quite simple, you should identify the topic update of your device and copy it into the second custom field.
It should look like this: &lt;strong&gt;$aws/things/{DEVICE_NAME_IN_KITE}/shadow/update&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The bridge will recognize it as an AWS reserved topic and will use the appropriate logic for the connection.&lt;/p&gt;

&lt;p&gt;The data sent will be published in the shadow in the &lt;strong&gt;raw&lt;/strong&gt; field as shown in the following example.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;MESSAGE SENT HERE&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moreover, the Bridge will subscribe to the Accepted and Rejected topics, so you will be able to control if the publication has been done  or rejected by the broker.&lt;/p&gt;

&lt;p&gt;Another advantage of using the AWS shadows, is the communication with the device, it allows you to send commands to it.
You have to complete the json raw data field at device shadow desired field.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;desired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;MESSAGE FOR THE DEVICE&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;pictures/Bridge/Bridge_overview_AWS_option_shadow.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you try to publish into a shadow that it isn’t already provisioned the Data Bridge will create it before publishing so you don’t have to worry about it :).&lt;/p&gt;

&lt;p&gt;But if you still want to create it manually you can follow these &lt;a href=&quot;AWScreatenewthing.html&quot;&gt;steps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;deploy-and-defend-your-bridge-on-aws&quot;&gt;Deploy and defend your Bridge on AWS!&lt;/h1&gt;

&lt;h2 id=&quot;what-will-you-need&quot;&gt;What will you need?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Data Bridge &lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Data_Bridge&quot;&gt;code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;KITE Platform &lt;a href=&quot;KitePlatform.html#what-is-kite-platform-api&quot;&gt;Certificates files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An IpSec Service provided by Telefónica &lt;a href=&quot;BPIPsec.html#what-is-ipsec&quot;&gt;(IPsec)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS account:
    &lt;ul&gt;
      &lt;li&gt;Identity and Access Management roles&lt;/li&gt;
      &lt;li&gt;AWS Systems Manager Parameter Store&lt;/li&gt;
      &lt;li&gt;Amazon Elastic Compute Cloud instance (EC2)&lt;/li&gt;
      &lt;li&gt;AWS IoT Core&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📍
For the time being, if you use a SIM from the Thinx testing network you will not have access to the Kite Platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-bridge-python-code&quot;&gt;Data Bridge python code&lt;/h2&gt;

&lt;p&gt;You can download it from our &lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Data_Bridge&quot;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;kite-platform-certificates&quot;&gt;KITE Platform certificates&lt;/h2&gt;

&lt;p&gt;One of the Data Bridge strong points, is the integration with Kite.
Kite is the Telefónica’s IoT Connectivity Platform, and Kite provides an API interface for management via HTTPS.&lt;/p&gt;

&lt;p&gt;Ask your Telefonica’s local contact for the certificates associated to your account.&lt;/p&gt;

&lt;p&gt;Once you receive this certificate, you will need to extract the keys that the Bridge will use to validate the connection.
If you want to see how to do it, you can follow our 
&lt;a href=&quot;KitePlatform.html#extract-your-credentials-files&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you finish these steps, you should have a file with the certificate and another one with the access key:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;your_customer_certificate.cer&lt;/li&gt;
  &lt;li&gt;your_customer_certificate.key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ipsec-tunnel-configuration-between-telefónica-and-aws&quot;&gt;IPsec tunnel configuration between Telefónica and AWS&lt;/h2&gt;

&lt;p&gt;An IPsec tunnel is a direct connection between the mobile network of your SIM pool and the Data Bridge deployed in AWS.&lt;/p&gt;

&lt;p&gt;This connection not only creates a new network (VPN) but also guarantees the security of your data 
by allowing communication only between the devices that belong to this network.&lt;/p&gt;

&lt;p&gt;Although its functioning is quite complex to explain. The configuration is quite simple if you follow our 
&lt;a href=&quot;BPIPsec.html#how-to-make-your-own-ipsec-vpn&quot;&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you finish this tutorial, you will also have created a EC2 machine. 
This is the machine you will use to deploy your Data Bridge.&lt;/p&gt;

&lt;p&gt;Remember to keep both the private IP of your IPsec network and the public IP to remotely access the machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;amazon-web-services-cloud-computing-services&quot;&gt;Amazon Web Services Cloud Computing Services&lt;/h2&gt;

&lt;p&gt;If you are using this tutorial is because you have chosen Amazon as your cloud.&lt;/p&gt;

&lt;p&gt;For this reason, we have tried that all the services provided in the Data Bridge are integrated at AWS platform.
In the following steps we will explain how to configure these services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-identity-and-access-management-iam&quot;&gt;AWS Identity and Access Management (IAM)&lt;/h3&gt;

&lt;p&gt;IAM is a service that allows you to manage access to AWS services and resources securely.
This service will allow you to control users and their permissions. 
But it will also allow you to manage access policies between the different Amazon services.&lt;/p&gt;

&lt;p&gt;You will need it in this tutorial because it is necessary to assign an access policy to the EC2 machine 
that allows access to the other services.&lt;/p&gt;

&lt;p&gt;Your EC2 needs the following policies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Access to IoT Core&lt;/li&gt;
  &lt;li&gt;Access to AWS Systems Manager Parameter store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To attach an IAM role to an instance …&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;
  &lt;li&gt;In the navigation pane, choose Instances.&lt;/li&gt;
  &lt;li&gt;Select the instance, choose Actions, Instance Settings, Attach/Replace IAM role.&lt;/li&gt;
  &lt;li&gt;Select the IAM role to attach to your instance, and choose Apply.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-systems-manager-parameter-store&quot;&gt;AWS Systems Manager Parameter Store&lt;/h3&gt;

&lt;p&gt;AWS Systems Manager is a service that gives you visibility and control of your infrastructure.&lt;/p&gt;

&lt;p&gt;Among its resources, there is the Parameter Store. 
This parameter storage allows the secure storage of certificates and passwords.&lt;/p&gt;

&lt;p&gt;For this example, we will use this service to store the content of the Kite certificates files.&lt;/p&gt;

&lt;p&gt;In the AWS Console.&lt;/p&gt;

&lt;p&gt;Go to Systems Manager / Parameter Store / Select: Create parameter&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_SystemsManager_ParameterStore_create.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a name for the parameter. And copy the contents of the file in the &lt;strong&gt;value&lt;/strong&gt; field.&lt;/p&gt;

&lt;p&gt;Do this for each of the files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;your_customer_certificate.cer&lt;/li&gt;
  &lt;li&gt;your_customer_certificate.key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;pictures/AWS/AWS_Console_SystemsManager_ParameterStore_create_config1.png&quot; alt=&quot;pic&quot; /&gt;
&lt;img src=&quot;pictures/AWS/AWS_Console_SystemsManager_ParameterStore_create_config2.png&quot; alt=&quot;pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And click on the &lt;strong&gt;Create parameter&lt;/strong&gt; button at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Save the names of the parameters, they are necessary to configure the Bridge.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-iot-core&quot;&gt;AWS IoT Core&lt;/h3&gt;

&lt;p&gt;AWS IoT Core is a managed cloud service that lets connected devices easily and 
securely interact with cloud applications and other devices.&lt;/p&gt;

&lt;p&gt;If you have not previously worked with IoT Core, we recommend that you familiarize with the environment. 
And make sure you understand concepts like MQTT, Broker and Shadow.&lt;/p&gt;

&lt;p&gt;As for configuring a new device, you can do so by following these 
&lt;a href=&quot;AWScreatenewthing.html#create-device-thing-in-aws-iot&quot;&gt;steps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but if you’re too lazy for it. “No problemo” The Bridge will create it for you.&lt;/p&gt;

&lt;p&gt;Auto provisioning of new devices!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;amazon-elastic-compute-cloud-ec2&quot;&gt;Amazon Elastic Compute Cloud (EC2)&lt;/h3&gt;

&lt;p&gt;Amazon EC2 is a web service that provides secure, resizable compute capacity in the cloud.&lt;/p&gt;

&lt;p&gt;If you have carefully followed the steps to create the IPsec tunnel, you should already have created an instance.&lt;/p&gt;

&lt;p&gt;We have chosen an instance with linux, but if you prefer any other, 
just make sure that the instance can execute code in python.&lt;/p&gt;

&lt;p&gt;To attach an IAM role to an instance that has no role, the instance can be in the stopped or running state.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;
  &lt;li&gt;In the navigation pane, choose Instances.&lt;/li&gt;
  &lt;li&gt;Select the instance, choose Actions, Instance Settings, Attach/Replace IAM role.&lt;/li&gt;
  &lt;li&gt;Select the IAM role to attach to your instance, and choose Apply.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Requirements to connect to your EC2 instance with SSH&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSH &lt;strong&gt;file.pem&lt;/strong&gt; provided by Amazon when you launch the instance&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IP-address&lt;/strong&gt; assigned to your ec2 instance&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;username&lt;/strong&gt; on the instance distro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On linux&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a terminal&lt;/li&gt;
  &lt;li&gt;Type the SSH command
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -i file.pem username@IP-address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now you’re connected&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On Windows&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install Putty https://www.putty.org/&lt;/li&gt;
  &lt;li&gt;Open PuttyGen&lt;/li&gt;
  &lt;li&gt;Select checkbox “RSA”&lt;/li&gt;
  &lt;li&gt;Click load and select your &lt;strong&gt;file.pem&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A message will prompt, click ok.&lt;/li&gt;
  &lt;li&gt;Click on save private key.&lt;/li&gt;
  &lt;li&gt;Then a message will prompt, select yes&lt;/li&gt;
  &lt;li&gt;Type a name for your key &lt;strong&gt;file.ppk&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Now close PuttyGen program and open Putty&lt;/li&gt;
  &lt;li&gt;Go to Connection/SSH section and double-click it.&lt;/li&gt;
  &lt;li&gt;Go to Auth section and select your &lt;strong&gt;file.ppk&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Go back at the top in the Session section. Fill the field Hostname &lt;strong&gt;IP-address&lt;/strong&gt; and click open&lt;/li&gt;
  &lt;li&gt;A warning will prompt. Click yes.&lt;/li&gt;
  &lt;li&gt;Type your &lt;strong&gt;username&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Now you’re connected&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upload files using FTP Client&lt;/p&gt;

&lt;p&gt;You can download Filezilla using the next link (https://filezilla-project.org/download.php)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to Edit/Settings/Connection/SFTP, Click “Add key file”&lt;/li&gt;
  &lt;li&gt;Browse to the location and select your &lt;strong&gt;file.pem&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A message box will appear to convert the file into .ppk. Click Yes, and store it.&lt;/li&gt;
  &lt;li&gt;If the new file is shown in the list of Keyfiles, then continue to the next step. If not, then click “Add keyfile…” and select the converted file.&lt;/li&gt;
  &lt;li&gt;Go to File/Site Manager/Add a new site with the following parameters:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Protocol: SFTP&lt;/li&gt;
  &lt;li&gt;Host: &lt;strong&gt;IP-address&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Logon Type: Key File&lt;/li&gt;
  &lt;li&gt;User: &lt;strong&gt;username&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-run-it&quot;&gt;How to run it&lt;/h1&gt;

&lt;p&gt;Now that you know how to configure AWS. You can run it in just 3 steps !!!&lt;/p&gt;

&lt;h2 id=&quot;download-it&quot;&gt;Download it&lt;/h2&gt;

&lt;p&gt;You can choose between several options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;option 1: Download the Github repository on the instance&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Install git on the instace
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum upgrade
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Clone the repository
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/telefonicaid/iot-activation.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to Bridge path: &lt;strong&gt;scripts/Data_Bridge/&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;option 2: Upload the files from an FTP client&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Download the Github repository&lt;/li&gt;
  &lt;li&gt;Open Filezilla client&lt;/li&gt;
  &lt;li&gt;Select the path scripts/Data_Bridge/&lt;/li&gt;
  &lt;li&gt;Upload all files and folders to the instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have the code in the machine you just have to install the python libraries.&lt;/p&gt;

&lt;p&gt;You can install them one by one. But the fastest way is to use the requirements file&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-it&quot;&gt;Configure it&lt;/h2&gt;

&lt;p&gt;We have tried to make this as simple as possible.&lt;/p&gt;

&lt;p&gt;So, you’ll only need to fill in a few fields in the configuration file 
&lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Data_Bridge/config/Configuration.yaml&quot;&gt;Configuration.yaml&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;UDP&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4114&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;KITE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://m2m-api.telefonica.com&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cer_file&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;private_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key_file&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;configure-the-cloud&quot;&gt;Configure the Cloud&lt;/h4&gt;

&lt;p&gt;This parameter is used to identify the cloud and select the configuration file. 
In this example you must select AWS&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;configure-the-udp-socket&quot;&gt;Configure the UDP socket&lt;/h4&gt;

&lt;p&gt;Here you can choose the port through which you will receive the UDP messages and the allowed IP addresses&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;UDP&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4114&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;allow any address&lt;/p&gt;

&lt;p&gt;allowed values:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ip: “0.0.0.0”    (allow any address)&lt;/li&gt;
  &lt;li&gt;ip: “X.X.X.X”	   (restrict to a single address)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configure-the-kite-platform-connection&quot;&gt;Configure the Kite Platform connection&lt;/h4&gt;

&lt;p&gt;This parameter allows you to select the files the certificates to access the Kite Platform.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;KITE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://m2m-api.telefonica.com&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cer_file&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;private_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key_file&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you remember the name of the parameters created in AWS?
Now is the time to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;configure-the-aws-file&quot;&gt;Configure the AWS file&lt;/h4&gt;

&lt;p&gt;Here is an example of a configuration file for AWS connection 
&lt;a href=&quot;https://github.com/telefonicaid/iot-activation/tree/master/scripts/Data_Bridge/config/Configuration_AWS.yaml&quot;&gt;Configuration_AWS.yaml&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;eu-west-1&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;MQTT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$aws/things/&amp;lt;DEVICE_NAME&amp;gt;/shadow/update&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tlm/&amp;lt;DEVICE_NAME&amp;gt;/raw&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log_device&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;log/device/provision/new&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$aws&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file is quite intuitive, however here you can see carefully how to configure each section&lt;/p&gt;

&lt;h5 id=&quot;server-configuration&quot;&gt;Server configuration&lt;/h5&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xx-xxxx-x&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;topic-configuration&quot;&gt;Topic configuration&lt;/h5&gt;

&lt;p&gt;At the moment you only have to keep the fields as is&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;MQTT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$aws/things/&amp;lt;DEVICE_NAME&amp;gt;/shadow/update&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tlm/&amp;lt;DEVICE_NAME&amp;gt;/raw&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log_device&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;log/device/provision/new&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$aws&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;update&lt;/strong&gt;: this topic is the specific of AWS. It doesn’t make any sense to modify it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;: configure this field to select the default topic name.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;log_device&lt;/strong&gt;: topic name in which the new things creations are reported.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;reserved&lt;/strong&gt;: this parameter indicates that the name is a AWS standard topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;launch-it&quot;&gt;Launch it&lt;/h2&gt;

&lt;p&gt;Go to Bridge path and execute this command&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo nohup &lt;/span&gt;python main.py &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;sudo&lt;/strong&gt; Execute the instruction as if you were the administrator.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nohup&lt;/strong&gt; It’ll keep running even when you close the session.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;python main.py&lt;/strong&gt; will execute the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the Bridge is running, it will record all UDP messages he receives in a log file. 
You can monitor the last lines of the file with this command:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; log/data_bridge.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a log file example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;INFO : ################################# waiting for a new message #################################
INFO : Message Received [ {&quot;v&quot;:33,&quot;a&quot;:28} ] from [ 10.5.0.5 ] : [ 4114 ]
INFO : KITE Response status code [ 200 ]
INFO : GET information related to [ 10.5.0.5 ] from  KITE Platform
INFO : Found device cloud name [ MyDevice ] and topic [  ] in KITE Platform
INFO : Select Option 1: DEVICE [ MyDevice ] and DEFAULT TOPIC
INFO : Publish message [ {&quot;v&quot;:33,&quot;a&quot;:28} ] into topic [ tlm/MyDevice/raw ]
INFO : Publish Accepted code [ 200 ]
INFO : Sent MESSAGE [ {&quot;msg&quot;: &quot;OK: msg published&quot;, &quot;code&quot;: 200} ] to [ 10.5.0.5 ] : [ 4114 ]
INFO : ################################# waiting for a new message #################################
INFO : Message Received [ aaa ] from [ 00.00.00.00 ] : [ 4114 ]
INFO : KITE Response status code [ 204 ]
INFO : GET information related to [ 00.00.00.00 ] from  KITE Platform
INFO : Sent MESSAGE [{&quot;msg&quot;:&quot;ERROR:connection with Kite not established&quot;,&quot;code&quot;:404}] to [ 84.78.20.223 ]:[4114]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;#table-of-contents&quot;&gt;&lt;img src=&quot;pictures/utils/arrow_up.png&quot; alt=&quot;pic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of Contents What does it do? AWS Options: AWS Option 1: Telemetry AWS Option 2: Telemetry and Commands Deploy and defend your Bridge on AWS! What will you need? Data Bridge python code KITE Platform certificates IPsec tunnel configuration between Telefónica and AWS Amazon Web Services Cloud Computing Services AWS Identity and Access Management (IAM) AWS Systems Manager Parameter Store AWS IoT Core Amazon Elastic Compute Cloud (EC2) How to run it Download it Configure it Launch it What does it do? Each UDP message sent by a device, it is linked to several information such as source IP, destination IP and destination Port. The Bridge will use the device source IP to gather all the sim information stored at Kite platform. For the tutorial purpose you should pay attention to SIM’s custom fields, that you can manage from your Kite Platform account. Field 1 : Device Cloud Name (required) -&amp;gt; this is the name that will appear at the cloud (shadow name, twin name …) Field 2 : topic to publish (optional) Depending on the content of the fields, the Bridge will act differently. To choose between the different options you have to configure SIM information at the Custom Field 📍 The device name is a mandatory field, otherwise an error code will be returned, because the bridge wouldn’t know the virtual representation of the physical device. As we said before, There are two ways of working depending on the information provided as custom parameter in Kite. AWS Options: AWS Option 1: Telemetry AWS Option 2: Telemetry and Commands AWS Option 1: Telemetry This is the most straight forward option. You only have to provide a device cloud name at the first custom parameter in Kite. As a result all the messages sent by your device will be published at the default topic. The default topic has this structure: tlm/{DEVICE_NAME_IN_KITE}/raw Otherwise, If you prefer to send your device messages to another topic, you should add it as a second custom field at Kite. AWS Option 2: Telemetry and Commands The configuration is quite simple, you should identify the topic update of your device and copy it into the second custom field. It should look like this: $aws/things/{DEVICE_NAME_IN_KITE}/shadow/update The bridge will recognize it as an AWS reserved topic and will use the appropriate logic for the connection. The data sent will be published in the shadow in the raw field as shown in the following example. { &quot;reported&quot;: { &quot;raw&quot;: &quot;&amp;lt;MESSAGE SENT HERE&amp;gt;&quot;, } } Moreover, the Bridge will subscribe to the Accepted and Rejected topics, so you will be able to control if the publication has been done or rejected by the broker. Another advantage of using the AWS shadows, is the communication with the device, it allows you to send commands to it. You have to complete the json raw data field at device shadow desired field. { &quot;desired&quot;: { &quot;raw&quot;: &quot;&amp;lt;MESSAGE FOR THE DEVICE&amp;gt;&quot;, } } If you try to publish into a shadow that it isn’t already provisioned the Data Bridge will create it before publishing so you don’t have to worry about it :). But if you still want to create it manually you can follow these steps Deploy and defend your Bridge on AWS! What will you need? Data Bridge code KITE Platform Certificates files An IpSec Service provided by Telefónica (IPsec) AWS account: Identity and Access Management roles AWS Systems Manager Parameter Store Amazon Elastic Compute Cloud instance (EC2) AWS IoT Core 📍 For the time being, if you use a SIM from the Thinx testing network you will not have access to the Kite Platform. Data Bridge python code You can download it from our repository KITE Platform certificates One of the Data Bridge strong points, is the integration with Kite. Kite is the Telefónica’s IoT Connectivity Platform, and Kite provides an API interface for management via HTTPS. Ask your Telefonica’s local contact for the certificates associated to your account. Once you receive this certificate, you will need to extract the keys that the Bridge will use to validate the connection. If you want to see how to do it, you can follow our documentation When you finish these steps, you should have a file with the certificate and another one with the access key: your_customer_certificate.cer your_customer_certificate.key IPsec tunnel configuration between Telefónica and AWS An IPsec tunnel is a direct connection between the mobile network of your SIM pool and the Data Bridge deployed in AWS. This connection not only creates a new network (VPN) but also guarantees the security of your data by allowing communication only between the devices that belong to this network. Although its functioning is quite complex to explain. The configuration is quite simple if you follow our tutorial When you finish this tutorial, you will also have created a EC2 machine. This is the machine you will use to deploy your Data Bridge. Remember to keep both the private IP of your IPsec network and the public IP to remotely access the machine. Amazon Web Services Cloud Computing Services If you are using this tutorial is because you have chosen Amazon as your cloud. For this reason, we have tried that all the services provided in the Data Bridge are integrated at AWS platform. In the following steps we will explain how to configure these services. AWS Identity and Access Management (IAM) IAM is a service that allows you to manage access to AWS services and resources securely. This service will allow you to control users and their permissions. But it will also allow you to manage access policies between the different Amazon services. You will need it in this tutorial because it is necessary to assign an access policy to the EC2 machine that allows access to the other services. Your EC2 needs the following policies: Access to IoT Core Access to AWS Systems Manager Parameter store To attach an IAM role to an instance … Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/. In the navigation pane, choose Instances. Select the instance, choose Actions, Instance Settings, Attach/Replace IAM role. Select the IAM role to attach to your instance, and choose Apply. AWS Systems Manager Parameter Store AWS Systems Manager is a service that gives you visibility and control of your infrastructure. Among its resources, there is the Parameter Store. This parameter storage allows the secure storage of certificates and passwords. For this example, we will use this service to store the content of the Kite certificates files. In the AWS Console. Go to Systems Manager / Parameter Store / Select: Create parameter Select a name for the parameter. And copy the contents of the file in the value field. Do this for each of the files: your_customer_certificate.cer your_customer_certificate.key And click on the Create parameter button at the bottom of the page. Save the names of the parameters, they are necessary to configure the Bridge. AWS IoT Core AWS IoT Core is a managed cloud service that lets connected devices easily and securely interact with cloud applications and other devices. If you have not previously worked with IoT Core, we recommend that you familiarize with the environment. And make sure you understand concepts like MQTT, Broker and Shadow. As for configuring a new device, you can do so by following these steps but if you’re too lazy for it. “No problemo” The Bridge will create it for you. Auto provisioning of new devices!! Amazon Elastic Compute Cloud (EC2) Amazon EC2 is a web service that provides secure, resizable compute capacity in the cloud. If you have carefully followed the steps to create the IPsec tunnel, you should already have created an instance. We have chosen an instance with linux, but if you prefer any other, just make sure that the instance can execute code in python. To attach an IAM role to an instance that has no role, the instance can be in the stopped or running state. Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/. In the navigation pane, choose Instances. Select the instance, choose Actions, Instance Settings, Attach/Replace IAM role. Select the IAM role to attach to your instance, and choose Apply. Requirements to connect to your EC2 instance with SSH SSH file.pem provided by Amazon when you launch the instance IP-address assigned to your ec2 instance The username on the instance distro On linux Open a terminal Type the SSH command ssh -i file.pem username@IP-address Now you’re connected On Windows Install Putty https://www.putty.org/ Open PuttyGen Select checkbox “RSA” Click load and select your file.pem A message will prompt, click ok. Click on save private key. Then a message will prompt, select yes Type a name for your key file.ppk Now close PuttyGen program and open Putty Go to Connection/SSH section and double-click it. Go to Auth section and select your file.ppk Go back at the top in the Session section. Fill the field Hostname IP-address and click open A warning will prompt. Click yes. Type your username Now you’re connected Upload files using FTP Client You can download Filezilla using the next link (https://filezilla-project.org/download.php) Go to Edit/Settings/Connection/SFTP, Click “Add key file” Browse to the location and select your file.pem A message box will appear to convert the file into .ppk. Click Yes, and store it. If the new file is shown in the list of Keyfiles, then continue to the next step. If not, then click “Add keyfile…” and select the converted file. Go to File/Site Manager/Add a new site with the following parameters: Protocol: SFTP Host: IP-address Logon Type: Key File User: username How to run it Now that you know how to configure AWS. You can run it in just 3 steps !!! Download it You can choose between several options: option 1: Download the Github repository on the instance Install git on the instace sudo yum upgrade sudo yum install git Clone the repository git clone https://github.com/telefonicaid/iot-activation.git Go to Bridge path: scripts/Data_Bridge/ option 2: Upload the files from an FTP client Download the Github repository Open Filezilla client Select the path scripts/Data_Bridge/ Upload all files and folders to the instance Now that you have the code in the machine you just have to install the python libraries. You can install them one by one. But the fastest way is to use the requirements file pip install -r requirements.txt Configure it We have tried to make this as simple as possible. So, you’ll only need to fill in a few fields in the configuration file Configuration.yaml cloud: AWS UDP: ip: &quot;0.0.0.0&quot; port: 4114 KITE: url: &quot;https://m2m-api.telefonica.com&quot; certificate: &quot;cer_file&quot; private_key: &quot;key_file&quot; Configure the Cloud This parameter is used to identify the cloud and select the configuration file. In this example you must select AWS cloud: AWS Configure the UDP socket Here you can choose the port through which you will receive the UDP messages and the allowed IP addresses UDP: ip: &quot;0.0.0.0&quot; port: 4114 allow any address allowed values: ip: “0.0.0.0” (allow any address) ip: “X.X.X.X” (restrict to a single address) Configure the Kite Platform connection This parameter allows you to select the files the certificates to access the Kite Platform. KITE: url: &quot;https://m2m-api.telefonica.com&quot; certificate: &quot;cer_file&quot; private_key: &quot;key_file&quot; Do you remember the name of the parameters created in AWS? Now is the time to use them. Configure the AWS file Here is an example of a configuration file for AWS connection Configuration_AWS.yaml cloud: AWS region: &quot;eu-west-1&quot; MQTT: topic: update: &quot;$aws/things/&amp;lt;DEVICE_NAME&amp;gt;/shadow/update&quot; default: &quot;tlm/&amp;lt;DEVICE_NAME&amp;gt;/raw&quot; log_device: &quot;log/device/provision/new&quot; reserved: &quot;$aws&quot; The file is quite intuitive, however here you can see carefully how to configure each section Server configuration cloud: AWS region: &quot;xx-xxxx-x&quot; Topic configuration At the moment you only have to keep the fields as is MQTT: topic: update: &quot;$aws/things/&amp;lt;DEVICE_NAME&amp;gt;/shadow/update&quot; default: &quot;tlm/&amp;lt;DEVICE_NAME&amp;gt;/raw&quot; log_device: &quot;log/device/provision/new&quot; reserved: &quot;$aws&quot; update: this topic is the specific of AWS. It doesn’t make any sense to modify it. default: configure this field to select the default topic name. log_device: topic name in which the new things creations are reported. reserved: this parameter indicates that the name is a AWS standard topic. Launch it Go to Bridge path and execute this command sudo nohup python main.py &amp;amp; sudo Execute the instruction as if you were the administrator. nohup It’ll keep running even when you close the session. python main.py will execute the code When the Bridge is running, it will record all UDP messages he receives in a log file. You can monitor the last lines of the file with this command: tail -f log/data_bridge.log This is a log file example. INFO : ################################# waiting for a new message ################################# INFO : Message Received [ {&quot;v&quot;:33,&quot;a&quot;:28} ] from [ 10.5.0.5 ] : [ 4114 ] INFO : KITE Response status code [ 200 ] INFO : GET information related to [ 10.5.0.5 ] from KITE Platform INFO : Found device cloud name [ MyDevice ] and topic [ ] in KITE Platform INFO : Select Option 1: DEVICE [ MyDevice ] and DEFAULT TOPIC INFO : Publish message [ {&quot;v&quot;:33,&quot;a&quot;:28} ] into topic [ tlm/MyDevice/raw ] INFO : Publish Accepted code [ 200 ] INFO : Sent MESSAGE [ {&quot;msg&quot;: &quot;OK: msg published&quot;, &quot;code&quot;: 200} ] to [ 10.5.0.5 ] : [ 4114 ] INFO : ################################# waiting for a new message ################################# INFO : Message Received [ aaa ] from [ 00.00.00.00 ] : [ 4114 ] INFO : KITE Response status code [ 204 ] INFO : GET information related to [ 00.00.00.00 ] from KITE Platform INFO : Sent MESSAGE [{&quot;msg&quot;:&quot;ERROR:connection with Kite not established&quot;,&quot;code&quot;:404}] to [ 84.78.20.223 ]:[4114]</summary></entry></feed>